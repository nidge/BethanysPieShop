Building Web Applications with ASP.NET Core MVC
by Gill Cleeren

In this course, you'll learn how to build a complete application with ASP.NET Core 3.0 MVC using Visual Studio 2019 in a practical, hands-on way.

Course Overview
[Autogenerated] Hi, everyone. My name is Jill Clearance and welcome to Michael's Building Replications with a speeding at court, NBC. I'm the CTO of experience Belgium and help customers were building rep and mobile applications. Microsoft launched Espen in Court, NBC as the future off dot net. Since then, quiet. A few updates have been released for the plentiful. The latest version is a SP unit Corps trip Bondo released in September 2019. Max. It has extended the platform already quiet lot since its creation, and they will keep adding more and more features in the Net core. Going forward. This goes is aimed at giving a hands own way to learn about a hospital in court, report notes and reason. You're built together with me in visions to do 2019. You see how to apply the MBC pattern, builds views, work with database and much more. Some of the major topics that will cover include building a fully working application, starting from founder Project that you can use as the foundation for your own project. Understand that our detector oven and spin it Court NBC application Learn about the new features in a speed in its core tree and receive suggest stack helpers and view components. Access data in a database using entity, framework or tree include a ZB Internet identity to allow users toe authenticate to the site. By the end of the schools, you'll know how to build a full realigned application using a speed innit. Court tree. MBC Using visual to do 2019. I hope you will join me on this journey to learn a spirit core tree. NBC with deep building where publications with a SP Jeanette court every C course here at blue aside.

Course Introduction
Module Introduction
[Autogenerated] hi there. And welcome to this parasite course named Building Web Applications with a spin at court. MPC Mining is Jill Clearance, and I'll be guiding you through this course. The title of this course is already giving away what I will be teaching you in. The schools will be spending quite a lot of time writing code in visual studio, creating an ace peanut cork tree taro NBC application. And the nice thing is that you will be able to follow along with everything I'm doing in the schools. But a more on that later in this module. At the end of the course, we'll have understood how he's been at court Tree works, how M V C works and how visual studio can be used to create a really application that you can use as the basis for other applications that you'll need to build in your professional life. This school's is built with a spin it core treated Oh, so all samples and code are fully up to date with the latest and greatest. However, if you need to learn about a spin it court 2.1. Don't worry, as I will be showing you ran there are differences. An old coat is also included for a spin it court 2.1, but more on that. Also very, too. In the first real module off the schools are started. An overview off what, exactly? You'll be learning in discourse and what to expect in terms of gain knowledge. After completing its course, I'll be spending some time as well to explain you're already what a spinning core is all about and why it's such a big deal for Microsoft as well as for you. I don't know, developer. Finally, we will be finishing this model by taking a look at what you need to have installed on your machine to follow along with this course. I'm really excited to be able to Did you all this? Let's get started.

What Will You Learn from This Course?
[Autogenerated] as promised. I want to give you a quick overview off water. Expect from this course so that you know what you'll be spending your next couple of house with. As mentioned already, this course will teach you how to build a small but real life application with a spin at core M V. C. We will be using a spilled at Court three point out and Visual Studio 2019. This is at the time of the recalling off this course, the latest and greatest combination available. Microsoft releases frequent updates, which is why it may be so that here and there things will look slightly different when you follow along with this course. For this course, I want to focus on the doing instead of the talking. That's why we will be starting with file new project. I'd be spending quite a lot of time in the actual code of the application so that by the end of the course we will have a working a spin it court tree, eh? MVC application. Since I'm convinced that you will learn more by doing instead of just listening and watching me do all the hard work, I suggest that you follow along with everything I'm doing in discourse. To do that, you need to make sure that you download to cause fast. For this course, please go to the course page of this course and down the exercise fast. In there you will find for each module a start and end solution has been in a court. M V C. It's probably the biggest change that together with dot net core, was ever introduced to the Net plateful since its inception many, many years ago. While we work our way to the final application off course, done quite a lot of new things including, of course, ESPN at court and build Core, who also learn about NPC so that pattern itself used for the application we are building. You'll see what was added in terms of new features to this new release, including things such as tack, helpers and view components. We'll also be looking at entity framework or how we can add validation to the application and noble cover how we can build basic but much required security into the application. I reckon that is a useful couple of hours of learning for you, although this is a beginner's course. I can't really explain you everything. So also from my side, I do assume some knowledge from your side as well. Since we are developing a website, I assume that you have some basic motor off. HTML and CSS will be writing all of the code in scene shop, so I expect you have at least some basic knowledge of that as well. And in general, some affinity with Web development will come in handy as well. Note that you do not have to be an expert, C sharp or Web developer. Far from it, even just basic knowledge in these areas will do. Note also that you do not need any previous knowledge about a spin at NBC to be able to follow along with discourse. Even if you have never heard of the NBC pattern, do not fear as I'll make sure that you'll understand everything to follow along. We'll already be touching briefly on getting to know that NBC pattern in this model. And then in the coming modules, you will become on NBC Monster Off course. If you have a speeding that NBC knowledge already, some things will be easier for you, however, quite a few things have changed in a speech in that court, and in the case, you are already familiar with a spoon at NBC you can use. This goes to get an understanding off what changed with the introduction off Espionage Corps and Speed Annette Court NBC and says everything is fully updated for a spirit that cork tree. Even if you already have done that core knowledge, you'll still see what has changed with this release. Now, as I mentioned, we will be building a smaller application. That's take a look at the application we will be working with. We are creating an application for Bethany, one of our best customers. Bethany has a small but very successful shop that sells price. Since she wants to make her shop even more famous, she decided her online presence needs to be expanded, as so she'll need a Web show up to sell her pies in the schools. We will be building that shop for Bethany. It will contain a home beach with a selection off pies and a page with all the parts are shopping cart and off course. Also a check out for We need to add some basic authentication as well, since we need to create an account in order to be able to place an order

Demo: Looking at the Finished Application
[Autogenerated] So as the first demo of the school's let's take a look at the finished application that we will have created by the end of this course together, you see the finished application that we will be working on throughout discourse. Bethany Spy Shop has a landing page. A selection off pints of the week is shown. I can click on any of these pies, and then I'll go to the detail page off that particular pine. I can then add that to my shopping cart. It is now at the top. Have one item in my shopping cart that is shown over here. And, of course, we also see that shopping cart. It can also browse the entire catalog off pies by clicking here only Paice menu that will then expend all the price per category. That's for example, take a look at my favorite cheesecakes. You see the selection of cheesecakes? Well, at one of these deliciously looking blueberry cheesecakes, door shopping cart as well. We now have two items in the shopping cart. Heredity goes to click your own check out now and then we first have to look in. I have already created an account on beforehand, and I need to enter upon my details. Let me do that quickly. So there we go. On our entered all my details. I can I'll click on complete order, and, uh, the pi ce are on their way. We also have a contact pages. I haven't shown it from here. We can send an email to Bethany when we're finished working with aside to become, of course, look out and then we again see the option to either register or looking again.

What Is ASP.NET Core?
[Autogenerated] Now that you already have an idea what to expect from the schools and what we will be working on, let's explore what this a speeding, that core thing is all about them. And let's start this exploration with a short history lesson. No, here, not one like the one you hated in school. Anyway, things started for a S be quiet long time ago, way before the Net was even born. A S B, which stands for active service pages, was already created in the late 19 nineties to use it Matthew Script code in combination with HTML to create interactivity. Yours truly has actually done his first step development endeavors in this very technology. But let's not go there anymore. Micah's off then launched boat net at MIT. The launch They also created a speeding at and a spin at the Web forms Web forms was mainly aimed at making Web development as easy as Windows desktop development. We were able to use real C sharp coat in code behind fast in combination with mark up HTML that because drag onto the designer interface at the time, that was a great technology. But the created HTML was lacking seriously. Developers want to get more control over the market they created, and Microsoft gave developers and new to called a spin it MPC, aimed at being able to create nice HD mulligan in combination with a more test oriented approach, a speeder net. MPC allowed us for years to create maintainable code basis for replications. Haysbert in at NBC received a lot of updates over the years, but it was still based on the same foundation as what forms. Because of this dependency, it was still pretty happy to run and still very monolithic and tied to Windows. Micah's off therefore started the donut course tech, aimed at cross platform and lightweight development in 2016 after many beta release is the first release off a spin It core was released in August 2070. Mike Soft has released the first major update off a spin it core, namely a Speedo net core to point no over the course of 2018 2 major updates were released, namely 2.1 and two point to which brought quiet a lot of new features to the platform, including support for signals are and support for Raisa Class libraries and then in 2019 we got Don't need Court Tree 20190.0, and a spinach court trip window. The next major versions off the platforms. A spin that court is built on top of darkness core and therefore inherits its benefits has already mentioned a SP Cadet Corps s capable off running cross platform, and its does not tie two windows only it's there for possible to run your airspeed, innit? Core Kobe's on Windows, but also on Lennox and Mac. A S P det cord is basically a re rent a different branch. So to say, it's also not based on the co pays off previous versions. Off ACE be looking at NBC. That explains why some features such a signal are were not supported in the earlier versions. SP Unit Corps is the platform that we used to build our applications on top off a spinning at court. Every see is their framework that we're using to ride the application. Every sea in this context is does a free work. The name of the framework is coming from a commonly used pattern, the NBC pattern or, in full, the model view controller better. This pattern has been around for quite a number of years and is basically an architectural pattern that promotes separation off concerns. Instead of writing our coat in one big, untested ble block off coat, we will be separating the concerns so that the coat can more easily be tested in isolation. By using this approach, we end up with a much more testable and maintain little code base. Now, don't worry about fully understanding this pattern just yet. I'll be explaining the different building blocks in much detail later. ___________. I have mentioned already quite a few times that I'll be using a spinning at court tree pinto in this course, which is at the time of the creation of the schools. The latest first, all demos are available with the diamonds off this course for a speeding at court tree. However, if you are still using a speed into court to, you can still benefit fully from discourse. Microsoft has announced some time ago that a speeding at Court 2.1 will be that out the S version or the long term support first. This means that this version will get technical support from Microsoft in the foreseeable future and that you can keep using it for production implications. Microsoft Real release updates for 2.1 so including security updates for most things that we are covering in discos, there aren't a lot of differences. However, in some places in this course things are slightly different. Where it is the case, I will point this out, and you can also find you the dalits of discourse that a speed Annette Court 2.1 version off the full application. One more important thing to note here is that we aren't covering the pages framework. In this course, discourse will focus solely on building applications with the NBC framework.

Getting Your Machine Ready
[Autogenerated] I had to finish this introduction module. I want to make sure that you have everything installed to follow along with this course for all demos that we are doing in the schools, I won't be using Microsoft's flagship I D official studio. As mentioned, we are using a spitting at court tree 0.0 into Denver's. And for this version of dot net court, you will need to have visions to do 2019 installed. If you want to follow along with a spring in a court to 0.1, that's fine. You can choose between, which is 2 to 2017 or 2090 off course. A browser is also required. If you're following this girl from the machine running another operating system than Windows, things will still work for you. Remember that I said that Ace begin a core runs cross platform. Well, this is one of the places where you'll benefit from this. If you want, you can use visual studio coat as well for everything that I'm doing in the scores on the linen or Mac machine and off course, also in Windows. Other Omni Shop Ready editors, including atom, sublime or even vim, can also be used. But as mentioned in the demos of discourse, are be using Fisher Studio 2019

Demo: Getting Your Machine Ready
[Autogenerated] in this demo. Let me guide you quickly through everything that you need to have installed to be able to follow along with everything that I'm doing in this course. In this course, we will be using the latest version off video studio at the time of the creation off the course, and that is registered to 2019. A spin it court treatment also requires that you use business to do 2019 years either of diversions that you see here even the free community edition. We'll be fine to follow along with everything I'm doing here in this course, head over to register. Do that microsoft dot com slash downloads to get your copy. If you don't have suggested you installed at this time, you will also need dot net core the latest version two beats. Don't make sure that you dilute the dot net core trip wantto as decay. They conduct at court trip window and then make sure that you download the installer off the latest version off the court treatment. Oh sdk to go directly to the Down and Patrick for the dot net core treatment sdk use the following link

Summary
[Autogenerated] and we have arrived at the end of this first module. Although we haven't covered that much just yet. I want to point out the most important takeaways from this module. Microsoft is making a lot of investments in dot net Core and a Speedo Net court. It's clear that the future of Dark Net is don't let court. And, of course, by learning about a speed in that court and a speeding at court NBC, you are in the perfect position to benefit from this. Using a speedy Nedcor. Mike's have also made it possible to build and run a spin at court. Every see applications in a cross platform way, which is single handedly the biggest change we've ever seen in the world off a spirit in it that is now dive in the technical parts for real and start with the creation off the application we've looked at in this module. So in the next model will learn about the configuration and the setup over NBC site

Setting up an MVC Application
Module Introduction
[Autogenerated] Hi there. And welcome to this module titled Setting Up an M. V. C. Application Here on little Side. My name is Jill Clearance and I'll be guiding you through this. Mitchell. So far, we haven't really started with the creation off our side just yet, but that will change in this module. By the end of this model, we will already have configured the application correctly. Quite a few things are very particular in this area off the configuration of this site. So let's dive in and learn more artists. A small loaf of you off. What we will be doing in this module is in place. It was Start with the file new project, and we'll take a look at what gets created by the execution of the tempted. You will learn more about the different fathers get created when you act like you to template after that, who will explore the configuration off the site, which has mentioned is something that is very specific to a speeder Net court, Every seat

Exploring the Project Structure
[Autogenerated] as promised. Let's start with exploring the protect structure off a new SP unit. Corps Tree. NBC application will take a look at the new fast that are being generated by visual studio. I will see what is their use creating a new a spin in a court tree. NBC application can be done using Visual Studio 2019 as you see on the screen shot here with dot net core installed have the ability to select a speeding it Cora application in the list, off project templates or off course. I can also search for a spin at court in the search box at the top of the window. When I hit OK in the previous window that is registered, you will give us the option to select the template we want to execute. Different templates exist depending on the dark net core version that you have selected at the top of the window. The list has become quiet long, but I will highlight the most relevant ones for us here. Since I want to make sure that you understand all that is going on, we'll start on the blank slate and select later on the empty template in our demos are possible. Templates that comment for your studio 2019 include a template to generate a warp, a B I and a basic but fully working MBC application. The Web application template uses the rays of pages approach, which we don't cover in discourse. As mentioned, we will start from the blank slate, the empty project template. When we need visual stood your execute distemper it. We will get the project structure. You see her on the screen fault, and not a lot will be generated for us, which we could have expected since it was the blank template that was selected after all. If, on the other hand, you that vicious, did you execute the Web application and we see template, you'll get as mentioned on already more complete application. We don't going into any detail. Here you will see a folder for controllers, malls and views. Hence that NBC approach is already applied here. When using this template, I prefer to explain you in detail what is happening So I'm not going to be using this. Dump it here

Demo: Exploring the Project Structure
[Autogenerated] as a first small demo. Let's jump to visual studio and create our project already, and while we're added, that's already explore the newly created project. We are here in the start window off Visions to do 2019 and I'm going to create our new project in the project. Template Window will select a Spin it Corps Rep application. If you don't see this one directly, search at the top in the search field for a spin in that core evangelical. Next in the next window name your project. Bethany Spy Shop has elected location for the project. Thank you can create the visual studio will now give me a couple off options to create my spin it Cory Publication. In this court, we will be using a spin it core trip on Oh, make sure that happens like that a spirit core trip window and to drop down here. As mentioned, we will start from the Empty Corp application so I can explain you everything step by step. Don't add any authentication at this point Will at authentication later ourselves. Make sure that you have selected the site to be configured with https and don't enable doctor support we don't that sent click on create do create your replication division student has not created the application. Let's make sure everything works by running it very quickly. Click here Own Run on I s express. So here we see the application running and it's already saying how the world that looks good. I'll explain later. By the way, why is how the world is showing here? Let's go sit down again. It doesn't take a look at the project structure. Double clicking on the project file will open it in edit moat. Here, you can see that we are effectively targeting at court treatment. The file that you senior is specific to dock at court trip won't go as our small differences between this version and the 2.1 version. Let me show you that very quickly. Here you see the direct hard getting that core 2.1, and it also comes with a couple off package references. Those are not required anymore. Indoor court treatment. If you go into the dependencies note in the solution Explorer. You'll also see that by default. Indolent court report. Oh, there are no new get packages referenced next. We also seen the solution that by default and upset things far has been generated. We'll talk about that later when we use our connection string. And then there are two classes in there which also have been generated by default the program and start up close. But let's take a look at these in the next demo. Let's return to the slides for now.

Site Configuration
[Autogenerated] Now that we have seen the different fathers were created, let's start with actual configuration off the site. In the previous demo, you have seen that at the root of a spinning at court application had two very important fast, namely, the program notes yes and the start of Odysseus. As mentioned in the demo, these two classes have a very distinct task in the life cycle. Often a spin IT court NBC application. The program clause in our application contains a main function. As you can see here, this may sound a bit wit on A S P. Net core application is in fact, a console application, and therefore it contains a main function that will execute. So what is really happening here in the main function? Ah, host is being set up, which will occur Figure a server and a request processing pipeline. We are calling the Create Host Builder, which was set up an application with some defaults using the host. Don't create default builder. One of the things that the letter will do is configuring a Web server called Kestral by default your any speeding at court application as this hosted in its own internal Web server. Typically, you will still access the application over RS. And that link is also enabled by default behind the scenes here. So a lot of things are already done for you. Another very important thing that is happening here is that we are specifying the startup class using the use startup method. We are passing us type the start up close, which will be the type that actually performs the startup. Or better yet, the configuration off the application. Remember that I promised that I will point out that our changes between a spin it court tree and 2.1 well, this is one of these places on this light. You see the A speeding at court 2.1 version of the generated program clothes. Like I said, the changes between trip oh no and 2.1 are mostly minor for what we are covering. A speeding at Court 2.1 uses the Web host. Where has three pointer used the genetic host? There go is the same, though you could even use the Web post entry point. Oh, as it is still support. But going forward, it's recommended to use the genetic host by default in the start of class, we will actually typically be doing do things defined the request handling pipeline and configure all service is that we need throughout the application. The start, of course, is required to define two methods, which will be invoked automatically by a spin in that court. They are the Configure service's method, and he configure meant it. Indy Configure Service's method, which will be called first He will be registering. Our service is for the application. Now let me explain this a little bit more, since this is a very crucial to understand has been at court. This is a simple built independency injection system. Through dependency injection, we can achieve a much more loosely coupled architecture. We don't replication, but what is dependency injection? Really? Well, let's take a quick side step here. What we all know and do is the following. Imagine they have a class. Let's go into my class and in my class, who will need to lock, and so we need to have access to a longer clause. To log. Actions typically will create a reference off the my longer type directly into my class by calling new longer while there is an essence. Nothing wrong with doing that. Have just introduced a heart dependency between my class and longer. A first minor improvement could be introducing an interface. So I longer my claws can now work with I longer. But as long as we have two instance it the eye longer to be a new longer. We still have tight coupling between the two clauses. What we need instead is a way to push a longer instance into the mic loss. Now, what we could do is passing a longer instance through a constructor para meter, for example. Now, while that would work, we basically have moved to responsibility to create a new instance. Abla tree. Isn't there a better way? Well, there is, and it comes by using a dependency injection container instead of us manually in the object tree, creating all the instances ourselves. We'll have a container do this force. So how does this work? Well, we again have the mic laws, which needs a longer instance that hasn't changed. We now introduce a dependency injection container that basically has two functionalities. First is the place where we will register all our dependencies. So in our case. We use it to register in the collection of things. It knows the eye longer, and the longer basically saying, When someone asks you for an eye, a logger, give them a longer instance. The container will be the one creating the instance off, the longer that's more or less. Already, it's second functionality. Everyone within the application, including My Klaus, knows about the D ay container and can simply ask it for an instance off I Logar. The container will then return a fully resolved engines off, the longer to the callers on my clothes. The main goal of this container is having a central place to store all dependencies and being the central point to resolve instances for other components. Now I am not telling you. Oldest Well, let's go back to the configure service's matter in the start up. This is the place where we will be registering all dependencies with dependency injection system built into a speed Annette court. This container is available to the ice service provider interface, and the service's collection you see her is the collection of service is it manages so we can in the Gore Figures Service's method at service is to the collection off service has managed in the application. Now service is is a very broad term, and it is in fact, exactly that. Service is our objects with a certain functionality. For other parts off the application, we'll be able to register. System service is as well as our own, which we will be doing co hide a lot later. ___________ and spit in that core already comes with a large number of service is available to us that we can register if we will be using them in the application support for every C is, for example, a service we will need to bring into the application. This can be done using the line you see highlighted here. So by calling service is don't add controls with views. For those already familiar with a spinning at court, this replaces service is off at every sea which we had in previous versions. Then, in the configure mattered, the request pipeline will be set up. The request pipeline consists out off a number off components chained behind one another. These are the so called middleware components. These components will intercept or handle incoming 80 to be requests and produce an age to be response. Each component will be ableto alter the request or response, or simply pass it on to the next component in the pipeline. Let's take a look at a graphical representation of this first. This is how you should imagine the middle where hey, quest by plane. It's composed out of a number off Middle West components sequentially placed behind one another. When a quest is sent to our application, it with in most cases, traveled through these components. Each of these can make changes to the request or performer check and then passed on request on to the next one in the opposite direction. The same thing will happen when an application has produced a response. It's dual, terrible to the components, but then, in the opposite direction, you can see the configure method again, where we are now registering four middleware components. Each of these components will perform some functionality owned incoming request or on the outgoing response along the way through the schools, we will be registering quiet if you're in here. So what are these components and doing? First, I'm using used developer Exception page. This will enable the use off the developer exception page of my application so that we will get useful information during development. The U Status code pages method will that support for text only headed for common state of skirts. Such a status 400 US static files is another Middle West component and registering here, and that will enable the ability for my side to serve static files. Finally, use end points will be adding middle where that will enable rounding the request to the correct and point in my application. This has to do with the routing system, and we'll discuss this in much detail later. ___________. Now, one more thing about the middleweight pipeline. Since these components will be in a pipeline, basically the order in which they get add. It is important all these components work sequentially on the request order response and does best along the request. Does the order mean they are at it? Matters typically you're called to at the end point. Middle West component needs to be at the end of the pipeline. However, a component to compress the response going back to the client should be added before the component that returns static images. Otherwise, the static files would never get compressed. So when an SP genetic or application is starting quiet, a few things are set in motion has do a quick recap here. The application starts with the call to the main function in the start up close. Then we specified, which was our start up close using the you start up calm in the startup class. First go Figure Service's is called a luminous to register service is it will want to use in a replication. Then the configure minted is called where the request by plan is set up. After all that, our application is up and running and is ready to handle incoming requests.

Demo: Site Configuration
[Autogenerated] So now that we know how an ___ big medical application stunts that return to the demo and go figure the application we finished the last module by it's a touching the program file, but we haven't looked at it yet, so let's do that now. Here is the program close, and, as you can see, the program calls comes with a static fort mean and just like anything in the Windows world, the static Fort Maine is the thing that will get called when an application stones indeed, an aspirin, it cool replication will effectively run as a console application, and that is why we have this static Fort Main that. Then we'll create a host that will run our application in the main will call the create host builder, and in there a host will be created that would then run our application. You can see that we're first going to call on the host. We create default builder method to create default, building that it will set up a host building with quite some defaults already. Let's take a look has go to the documentation of this method Here. Under the remarks, you can see that quiet a few defaults are already being set automatically. One of them is that the APP settings file will automatically be read out. For us. Has mentioned before will use that later. When we use our connection string, the environment will, by default, also be set to development. And he has been at court. Application can run under different environments. One of them is development. I will use that in just a minute. Next, a new Web host will be configured again with defaults. Let's take a look here under remarks. We can see that a Web server called Castro will be automatically created for us. Remember that I said that he has been in court application or runs as a cons own application. But of course it is a Web application, whether it comes with its own built in Web server called Castro. However, that is not the server that is really going to expose your application to the Internet that will still be done using I s and so integration with eyes is required and that tube is already set up automatically for you. Some all the default are also applied here automatically, finally, and that's a very important one. The use start of method is going to be called and then type startup. It's passed in here. In that type, we're really going to configure our own application. And the start, of course, is of course, that second father is there by default. Let's take a look at the start of clubs in this town of clients. Receive the Configure Service's and the configure method. These methods are called automatically by a spin at court and are called by name. As you see, there are not overwrites. IndyCar Figures Service's method. We get in these service's collection, and that is basically our entry point toe. Add items into distresses collection, so the dependency injection container that comes with a spin it go out of the box in there. We need to add all the service is that we will be using inside of our application. There's can be built in services as well as our only service's, which will start adding from the next module for now. What I'm going to bring in his support for M v C. This we can do by calling only service's collection the ad controls, which fuse mattered. Basically, this will bring in support for working with NBC in our application. If you still are using a spin it court appoint one you won't find the ad controls refuse. Instead, what you need to use is the service is at NBC Service is that at NBC is now basically replaced in that courtroom. Bondo with that controls refuse, but it would still even work in both net core Treat Wonder. But let us they quit playing donut courtroom window, and it's removed the other NBC and use at controls we choose. Instead, Emiko Figure Method the 80 to be request pipeline will be configured. There is some defaults in here, as you can see and notice that the first line is going to use an environment check using dependency injection. This method will receive a Web host environment instance. And on that we are going to check if we are running in development. Remember that we just saw that the application was going to be configured for development by default. Well, here we are checking that now. What is this actually going to do well, go to the property's off your project and under D bag. He was fined one for viable called the A's been at court environment for reliable, and currently it's such a development that's an environment for rival automatically wired up by a spirit court, And this allows you to check in which environment you are running. You can replace this by production or staging. This allows me, in my configure, matted to do things based on the environment that the application is running in in here. I'm going to check if we are running in development moat, and then only are we going to plug in middle, where that is going to show the developer exception page by default. A. Spin it. Cole will not show us any exceptions that have happened, but that plugging in this Middle West component in the request pipeline we will see a replacement, Let's say, for the younger screen off debt off previous versions of A has been at NBC using this middle where we can see exceptions that have happened in the application. Of course, we only want to see these exceptions. If the application is running and development, I'm going to be adding some more middleware components. At this point, I required at my application runs on https so I'm going to use the middle. Where that redirects http request to https using absolute _____. Http. As redirection. That's another military component. After added to the pipeline, we can have another one. I want to make sure that my application will also serve static files. So images JavaScript Pharmacy is as fast answer won by default. My application won't do that. I need to plug in middle where that will do that. And it is going to use static fans middleware by default. The use static Fans will search any directory called Dub Dub Dub Route four static fast. We can change that and we'll see how that works later on. Next we see some other coat. It was ______ by default already used rounding and use endpoints. Well, the letter is actually responsible for that hello world that we saw in the previous demo. When a request was sent to the application, the application was going to respond by sending to the response a string saying Hello world. So you use routing and use and points Miller, where basically enabled M v C to respond to incoming requests, it needs to map an incoming request with the correct coat that will execute. Of course, we don't want to respond to every request with hello world. So we're going to have to replace this coat here are going to be bringing in and points that map control round. We'll look at rounding in much detail later in the course. For now. Just remember that the coat, a tough now added, is going to be responsible, Let's say to map an incoming request with an action on a controller. If you're unclear what actions and controllers are, don't worry. You'll understand that very suit. But I need to bring in this end point here to make sure that we can visualize our pages starting from the next module. Mythical. Figure it. There was this Andy configure matted, fully ready. My start up close is now. I think in a state that we can start adding pages. I will start doing that in the next model. Let's build things to make sure that I haven't introduced any Paris here, and so we see that everything is still building. That's good. That's a good foundation to start building our pages in the next month

Summary
[Autogenerated] you know already have a good understanding of how it and spin it. Court tree NBC application is typically structured, and if you have knowledge off previous versions off NBC, so number that core versions have noticed that quite a few things have changed in this module. You've also learned that for the first time, a spin it core comes with dependency injection sport built in in the also important startup girls. We've seen how, in the configure Service's method, we have the ability to register service's with dependency injection container. Finally, we've also looked at the middle, where components that to get her built up that request pipeline with the side now read yanker figured it's time to start writing the code for the first page and to end. That's what we'll be doing in the next module.

Creating the List Page
Module Introduction
[Autogenerated] Haider and welcome to a not a module off the building Web applications with a speed genetic or NBC three course here on _______. I'm still Jill. Katherine. So that has not changed since the last module in this module. We will create a list page for our application. Yes, You are going to be building the first queen off the application right here, right now. For that, you are off course going to follow the principles off the MBC pattern, so you'll get a thorough understanding off the pattern. And how does this apply it in a Speedo Net Court, NBC, in this module at the end of this model will have already a good understanding off how you can create new pages in an eight speed in that court, NBC site as always. Let me give you an outline off what we will be looking at during this module. We are using a speeding at court every C three and off course that fully relies on the NBC pattern For that very reason, I want to make sure that you understand the concept off M v C and will kick off the model with an overview of the building blocks in an NBC approach. So we hold on the same big here about M V. C. In the next part's I will take you through the creation off the page that we're going to build in this module, and we'll see how each building look is to be created using a speeding at court NBC. We'll start on the ground up as you were first created, the model and positively classes Next, quite important in the whole NBC story is, of course, the controller, and it will look at how it can create a controller for the list. Thank you, and we only have two. Controller. We won't really see anything just yet. We'll need to add a view for that. So we'll be learning how we can add the view in the next boat. And we'll learn about razor and owner of you related topics in here as well. Finally, will want to make our if you look a bit nicer. To do that, I will show you how you can add in your project some bootstrap coat. I will see how vicious did your allows us to work with clients. Hide packages such as bootstrap. This is going to be a very rewarding module. Since you'll be able to run your side by the end of this module and actually seeing the result off all your hard work, let's dive in.

Demo: Looking at the Final Page
[Autogenerated] now, before we started the creation of the big itself. That's quickly take another look at the page. So you know what we are going to be working towards. So what you see here is the state off the application as it will be. By the end off, this model will have a pie list that lists out all the pies under the cheesecake category. So this is what you will have built by the end of this month. Let's see how we can do this.

Hello MVC
[Autogenerated] Since this course is all about the M V C pattern used in a speeding IT court NPC, it's important that you understand the embassy pattern. Let's start with that. The letters M V C. Stand for Model View controller. The NBC pattern is an architectural pattern that has been around for quite some years. It's not something that is unique to a spirit net. Far from it. It has been created with the idea in mind that code all classes. I should be doing one thing and one thing only. In other words, to improve the separation of concerns. This results in more loosely couple systems, and the Net result is that we'll get software that's much more testable and maintainable in every sea will typically have three building blocks. The model contains the data the user works with. These are the main causes as Weathers operations to work with this data, often referred to as the model logic order domain logic. Typically, the glasses in here represent everything in the model that we're going to work with. In the case of Bethany's Pie Shop will have a bike laws on order. Cost answer controls will provide the logic that works on the data model and prevent data for the view to display. The view's finally will contain logic to display data to the user so that it can again be processed by another control of action. And we look at the floor will get in a spinning at court. Every sea will see that a request will be arriving on one of the controller classes. Controls have action matters, which are public methods that get associated with the euro. So when the user browses to a certain neural, the specific method under controller will be invoked. This, in turn, will trigger coat on the model and then of you will be selected to be displayed with the data from the model to the user views in a spin it court, NBC are using Razor, which is the view engine. If you know razor from previous versions of MPC, you'll see that in terms of razor, not much has changed in that area. With the release off dot net core, we'll see what has changed in the coming modules. It's important to understand that there is a difference between a SP Annette Court and a speeding at court, NBC he's been in that court is the foundation. It's the over source framework that allows us to build modern replications espionage corps. NBC is basically a layer above, and it brings to the table the ability to build where a B I's and Web applications next to M V. C R frameworks book on took a speeding at court as well, such as the Razor Pages framework.

Creating the Model and the Repository
[Autogenerated] Now that we know a bit more about the NBC pattern, we're going to kick off the work for this model by looking at the layers under the actual view. So the model repository and controller before we look at the coat, it's important to understand that a speeding at court NBC is pretty convention based. That means it will, by default, expect certain components. Toby any certain folder or have a certain name. We'll come across this several times, but he was one already. My default, a speeding at court applications used common folders for each of the building books, so you will typically see controllers, models and views folder in an NBC application. Let's look at the 1st 1 the models now. I have been referring to the model already quite a few times, but what exactly is that model them? We referred to the model as the group off classes that make up the domain data. So typically, these are playing all T a lot of courses or poco classes next to the main data. That model also contains the classes that managed the data. The letter wouldn't typically be a repositories close, but more on that in just a second. The model should typically have a simple A P I, and its main goal is hiding the nitty details off how we managed or interact with actual data from the consumer. We don't want to spread the code that does the actual data interaction throughout our code base. We want to group that coat inside the model. Like I said, part of the model is, of course, the domain classes. So poker's off plain old CLR objects. In our case, we'll need to represent pie instances in our application. The middle class pie is part of the domain. Off the application, you can see the pike lost, and we'll be using this one in the demo very soon. The claws itself has no base close. It is just like I said, a simple poker class each by will also be part of a category, another class part of the domain. Off the application, just the main classes alone don't make of the model will also need classes that will perform actual data persistence. This will be handled by creating a depository clothes, which is a clause that abstracts away the details off how persistence is happening freely translated as mentioned before. We don't want to litter our code of the application with code that persists. Objects all that girl should be placed in the repositories close, which can then be used from our application. I've said that the model should expose a simple baby. I do. It's the rest of the application. Well, that is what you see here. We're looking here at the contract, the interface of the repositories called AIP I repositories. This interface defines what are impulsive story will be able to do. Initially, it defines a method get old price, which is returning, and I inimitable empire containing probably all pies in the data store. Next. It also defines emitted called Get Pie Pie I D. Which accept the idea off the pie will want to retreat. That's pretty simple. Rent in the upcoming Demmer will be creating this interface, and this module will also be using Mark Data will own a link. Our application with a real database in the next Montreuil working with market data for now can be done by creating a repository. Let's call it mook pie repositories that implements the interface. We've just defined this Careful now returned some hard coded data, and you see that happening in the demo now are repositories class. So the mock a pirate positivity will be consumed by a not across. Traditionally, what you would do is creating an instance in the coat of the consumer. This would have ever create a hard ling between the consumer and the repositories class itself. Now remember that NBC was all about loose coupling, and here we are, considering to do tight coupling That's not good. In the previous module we have seen that ESPN et court comes with a built in dependency injection container that allows us to resolve dependencies at runtime. We can register classes and the interfaces in the Gulf interservices method off the stuffed up class. The container worked with built in service is, but the good news is that we can also use the system for our own service classes instead of creating an instance of the repository in our consumers clothes and thus creating tight coupling. But you will do is register our depository in the container. All other causes that want to make use off our repository can then ask dependency injection containers for an instance off the repositories this way will create more loosely coupled coat. And remember, that's one of the girls off a speeding at court NBC. You can see a part off the Core Figures Service's method, which lives in the start of class. In the highlight that line here, I'm registering my own repositories for the marked by a positive in the container. Using service's note and scoped, I passed the interface and then the concrete implementation. The result off this call is that we can now from anywhere ask for an eye pirate depository, and we will, from the container get back a fully instance, hated mark by riposte story nobody that that's coked thing all about when registering items in the container. We have a number of options to do so, and they differ in the way that the optics are created and how long they will live. When we use at transient every time we ask, the container, for an instance will get back a new clean instance. The ad singleton method results in a singleton, a single object basically being created. Every time we request an instance, we'll get back. The same instance at Scooped is the one we just saw is the third scoped Lifetime service's are created once per request, so basically every sea creates one instance per exited the request but uses that same instance in articles within the same rep request.

Creating the Controller
[Autogenerated] okay, time for the demo. In the first demo off, this model will create the model, so I'll be creating the domain classes. And the repositories also registered that with the service's collection. So with the container, the difficult location for all domain related classes will be a model's folder. So I'll start by creating this folder in the route off. The project in there will add First our domain classes. Our start with deep I close our application definitely is going to need those. I'm going to get a new class and call it a pie, and I'm at the necessary properties for a pie. I'll want to keep track of the I. D. The name is sure description, a long description and some other properties you can see here on the screen notice that a pie will also be part of a category, but you don't have that category class just yet, So let me add the class for categories. Next, for a category are keep track of the I D. The name description, and each category will in turn contained a list off pies. If you don't go back to the pipelines, will see that this one is happy now as well. Off course the models is more than just domain classes. It basically is everything to work with the data in my application and so has mentioned will need some repositories on either repositories for the pies as well as for the categories. So let's start with adding the interface. First, I'm going to add an interface called I Pi Repositories. Of course, we need to change this into an interface, and in this interface I will define that I have a property, all pies, pies of the week, and I also will have a method called Get Pie by idee passing in the idea that only turned me a pie. Similarly, I will also have an interfaith, the category depository that will give me the ability to work with my categories. Don't forget to changes into interface. It's a very simple interface. It will just contain a property called all categories that will return me all categories that we currently have. We're not gonna work with the database just yet. Let's focus first on getting application toe work, and I'm going to do that with some mook data. I'm going to introduce now a mook implementation off both category and that pie depository. Let's start with the most implementation off the category repositories at the new clothes, and I'll call that mark category repositories. And of course, this one needs to implement the category depository. And as mentioned for now, I will just use some hard coded categories food pies, T's cakes and seasonal Paice. We'll do the same for De pie Repositories will create a mock pirate positively next. So adding your class called mark by repository have that influence I buy repository and an implant The interface. I'm gonna paste in some hard coded data here before I forget you can find all the snippets that I'm using with the downwards off this course as well. So take a look in there if you want to follow along. So if now add it the implementation for the eye pirate depository safe for now, we turned four heart good price. I have not implemented the pies of the week and I did create a small implementation for the get pipe. I i d To get this to work, we are working with a hard coded category repositories. Instance So although very basic, we now have created our models are domain, basically 40 application, and one other thing I need to do is anything. The register, my repositories in the service is collection so that I will be later on able to use them from wherever I need them in the application. And so we were going to do that in the Configure Service's method. So we already added in the previous module into the service's collection, basically support for every sea using at controls refuse. But in this very similar way we can add, our own service is into that service is collection. Now, by calling service is that at scoped we can register a service with its interface into the service's collection. And I'm gonna do that for the eye pie repositories and the monk implementation mocked by repositories. Of course, visual studio is complaining. It can't find that yet, so we'll need to bring in a using statement for Bethany's Pie Shop models. Similarly, we're also going to register the category depository. The mook category proposal to I should say the interface i category repository and the implementation is mark category repositories. Dario Maxtor at scoped. We also have service is adult at Transient and service is built at Singleton. Those are two methods that you will very frequently use now. What is the difference? Singleton is basically going to create a single instance for the entire application and reused at single instance at transit is going to give you back a new answers every time you're all ________ what has had scoped. It's like the middle ground per request. An instance will be created, and that instance remains active throughout the entire request. So as soon as the request goes out of scope, that insist will be also discarded. So it's like a singleton per request, let's say, and that is a good thing to work with in combination with data access and over depository is somehow data access on. We'll see why that is later on. It has to do with the way that entity framework works, but will only at that in the next month. So let's remove these two lines to clean a growed up a little bit, and it's not built things to make sure that everything is still building. That seems okay, So at this point, we have our model already in the application. Let's head back to the slides for now,

Demo: Creating the Controller
[Autogenerated] now that the dough mainly is already shaping up nicely, let's turn our attention to the controller in the entire M V C story. The controller has a very central and crucial rule. You can see the controller as the manager or the traffic agent within an NBC application. It will use the model and view to Indian to create the response that will be sent back to the client. The controllable does be responsible to respond to user interaction. When the user has, for example, clicked on the button and the request is sent to the server, that request will be picked up by controller. It's there for the controller that has the ant responsibility to create a response based on the user interaction. In doing so, the control is the party that will directly interact with the model, as we'll soon see is the control of it will be updating the model in response to user interaction by using the model for this to control, it doesn't need to know how the actual data persistence works. As you've already seen. It's the roll off the model to hide these details from the control. Let's see what the control of looks like them here in the snippet on the slide, we can see a very simple controller called by controller, as mentioned before a controller is nothing more than a clause, and it will inherit Trump, a base guards called controller. In NBC, a controls name is typically suffered with controller. That's a convention in the framework, I said before that it's a controller that will respond to an incoming request. In fact, to be correct, it's actually a method that will be invoked under controller when a request is received. Such a method is an action or action method. So in the coat that you see here that will be the index method. This method will then execute, and typically, in the case of every sea, it will return at the end of you. As a result, therefore, to return type is also view result. This will then make sure that the user will get to see a webpage as the result for sending a request to determine which of you is going to be shown a SP tenant court. NBC follows a convention more on that in just a second off course, a really action method on a controller will typically do more than just returning a few. Here on this line, you can see a more real I've example off controller. For starters, the controller is making news off the pirate depository, which it is receiving through constructor injection. In fact, is the build in a Spirit Court NBC dependency injection system that is taking care of this? An instance will be injected in the control automatically. You will see this in the upcoming DeMarco in more detail in the list. Action mattered were then still returning a few. But this view is now receiving some data in this case, the list off pies exposed for returned by the pie repositories. This data will then be used. Interview. Remember that the view, as we'll see soon in more detail, is effect Just a template. It will receive the model data that it will need to display correctly

Demo: Creating the Controller
[Autogenerated] So let's not return to the demo and at our controller, a spin it corporal search for controls in a certain place, and that is the controllers folder. So let's create that one first. That's right. Click here and at a new folder, and it's called that Controls. As mentioned, that is a convention that a spin in court, every C users. It will search in there for your controls. If you don't want to use that convention, you can actually override it. But that goes out of the scope for this course. So we'll use the default controllers. And in there we'll create our first controller and it will be the pie controller. That's again. Another convention will give controls a name and inking controller and then spin it. Core will address this controller by basically taking off the word controller. So I'll go and add a new item here. I don't like the head controller window myself. I prefer and new Item and in here select the Web and then you'll find Controller close, and it's called his Deep I controller. This is a cause as mentioned, it ends in controller, and it also inherits on the base controller class that comes from a spin in court. Every Sikh, by default and in next method will already be created. But I'm going to get rid of that one, and I'm going to use my own method here. Now. The pie controller is really the first place where will actually benefit from the dependency injection system that comes with a spin in court. By default, we will in here need access to our repositories, will need access to data that is that controlled via the repositories. So what I'm going to do is I'm going to introduce a private field for both the pie and the mark repositories, and we'll use the gin two faces for that. I'm going to bring in a private and I'll make it or eat on Lee I pi repositories, bringing the correct using statement. And it's called that underscore Piper depository. I prefer the underscore imitation that's of course, personal preference, and we'll do the same for the category depository. Now these are just feels. Of course, you don't get initialized automatically will do that using the constructor, so I'll bring in a constructor and two that constructor. We are now going to pass on. I buy reporter doing and I category repository that these are actually going to be injected in our controller because we've registered them earlier in this town up. Whenever a class is going to require any of these types, they will be injected automatically by the built in dependency injection system. I therefore don't have two new them up off course We need to keep track of these. I'm going to set my local by repositories to the one that is going to be injected. And of course, we're going to do the same thing for the category repositories. Dariga. So now we have access to our model classes in controller. Just a controller won't get us very far as mentioned in the slides. It's actually an action method that is going to be handling the incoming request. So I had an action method next, and actually matter needs to be a public method on a controller on a gun related return, a view the result off this method will be of you. Hence, I used the view result return type. A few result is again a built in type off ESPN court. Every C and I'm gonna call this method list because, in their view, that will create. Very soon we're going to show a list of all the pies in the application. Now what is this going to return at this point? Well, like I said, it's going to return a view. So let's return the view method, which is a built in method from a has been at court, and I'm going to be passing some data to this method. I will talk about the attack in the next round that you are passing two views. But for now, just remember that I'm going to pass to this review the pies that are coming back from the pie depository. So I'm gonna ask it to give back all the pi ce and pass those to def you so that the Buchanan literal displayed. That is again the way built because although we have now built a controller, we can't really see anything just yet. We'll need to add a view. So let's return to the slides for now and learn about views in every sea

Adding the View
[Autogenerated] So we now have the M for model and the sea for controller. So that means that the only thing we're missing at this point is the V for view. Of course, that's a very important one. We can write awesome code in the controller, but as long as there's nothing to visualize, the user won't be able to use any overcoat. So let's take a look at the views in this spot then. So what exactly is the viewed? As I've already mentioned that the view should in fact be considered a template and HTML temple, it contains markup code that will be used to visualize the data from the model, if the data would be, for example, a list off points. But in that case off, you can contain code that will loop overall bison list and visualize each off them. For example, in a row in the table. In a spin on that court, NBC view templates are see as htm Alphas. He's under father's that will contain the market coat. In the context of a spin on that court, NBC. We can distinguish two types of fuse, a plane or regular view or a strongly type to you. You will see what these mean in the upcoming slides, and you'll see in the demo that most of the time, in the case of a spinning at court, every see you'll be using strongly typed views interviews. We will also be making use off Razor a markups index that allows us to use C sharp coat in the Web pages we are creating. But first things first. Our views as mentioned RCS html fuss by convention views are placed in Diffuse folder, which is a folder under the route off the application in there for each controls that we have in the control. This folder, a corresponding sub folder, will be created. So if you have a pie control, it will also have its sub folded by under the Views folder. In that folder. Each of you is represented by a sea as HTML file. So for each controller, we need to have a sub folder right all the CIA's html from its lift. But how does the controller then? No, which few will need to get rendered. Consider the example controller here again, when we have the in next method and we are returning the view again by convention, the view that will be shown it's called in next artsy Shtml to the same name as the action method. If this view can be found, an exception will be thrown. So what does this view look like? That what we see here is about the most basic view I can really show you. It's plain html containing a death that will display aesthetic line of text. While this is technically, if you it's not very dynamic, we got to have just used a static HTML page here as well. Of course, use are capable off much more. Remember that we have said earlier that the view will receive data to visualize. It's basically going to be a template red. We indeed will need to pass data to the view. There are several ways to past eight. Probably the most basic one is using something called View Back. The view back is a dynamic object that we can add data to from the controller. As you can see here, I'm adding data to the message property, and since few back is dynamic, I can add as many properties as I want and give them the name I want our view cannot also access this data and this way become a bit more dynamic. Dynamic few. Really. You see a very basic view which is almost pure HTML, but notice the highlighted line again. This line is perfect with the at symbol and this is basically razor syntax. It's assigned to say that this line actually contains code that needs to be evaluated. You see me using quiet a bit off razor coat in the demos after the at symbol we again see if you back don't message. And so what happens here is that my view code now gets access to the same view back object as the controller and can read out of properties that were specified in the control attempt. This way, the controller and the View can exchange data. Now, One major problem is the dynamic aspect Here in real applications will need to cast quiet lot since all the best data is off the base object type. Just to be clear, our market coat to the view code will be written using Razor Syntex. Razor is a markups index which allows us to include C sharp coat inside off our pages. The coat is off course, executed on the service side, so it will be a spear in its core. Who is executing the coat and the resulting HTML will be sent down to the Kleins. Because of the fact that view back is dynamic, We won't use it all that often, and instead most views we will create will be so called strongly typed views in the coat you see here. I haven't action method list, and it is not just returning of, you know. Instead, it's returning of you passing in a list off pies using the depository boat pies, espera meat. This results in this list now being set as the view data dot model property off the view result that's being returned behind the scenes. The net result is that the view will get access to this list. Let's take a look at the view coat, but we're not working. It is a strongly typed view to create a strongly typed view at the top. We have to include the type off the object that is going to be passed in. What I'm doing here is again using razor kit to loop over all the pies in the model as though that model was the list that we passed to the view in the controller Kurt, I'm going to use here a for each razor expression here, which is just a C sharp expression inside the loop, I'm creating more HTML elements and again, through razor expressions, I cannot access the properties for each individual item in the list, such as the name and the price for each of the pi. CE in many cases will see that the model that we want to pass to the view doesn't map to the main model. For example, our view needs to display the list off pies but also need to display the name off the category the pies belong to. We could use the few back again in this case and past the extra data. So the name of the category using the View Bank now, while that works a better approach is using something called a view model. The view model is just a class that wraps multiple properties so that the view can access all the data it needs. Such a view model can literally be seen as a model for the view On the slip it you can see here. I'm showing one of these. Have you middle classes that we use in our dinners, the pies list, your model, the classroom, gramps and I innumerable in pies. So that's a domain model. But it also comes with a string current category property. An instance of this view model will does be passed to our strongly typed view.

Demo: Creating the View and the ViewModel
[Autogenerated] Let's go back to visual studio and create our first few together. We'll also add in one go the first view model. I think I've started every demo in this module so far by saying that there's a convention in place that we're going to use. It's not gonna be any different now. We are going to add our views and by default by convention has been at court is going to search for views in another convention based folded, which, not surprisingly, is called reviews. So I created views folder in the root of my application in there, we're now going to create a view for the pint controller. Therefore, under views were going to create an intercept folder pie because that folder will then contain the views for the pint controller. Don't name it by controller. As their controller, Suffolk's is removed to search for the corresponding views in the controller. We have grated the list actually made it to the viewed. It will not be used will be under the Pi CE folder, The view called List. There's a one on one mapping between the name of the action method and the name off the view that will get returned. So I goto at new item here and again on the Web. I will now select a razor view. As you can see, there's two types here, reserved page and reserve. You will need to raise her view. The name of this view will be list don't see as HTML CSS HTML files is a razor file that will contain see job mixed. Let's say, with HD market, that's an aries of you. I just removed the default generated content. Let me phone her pasting some default hd male. As you can see, this is that's a very static HTML that is just going to set up title off the page. But it is view coat. The list action method returned a view that was going to be bringing along that say, all the pi ce. So in other words, get access to this list off pies, in my view, therefore, I'm going to make a strongly typed view and a time that his view is going to be using is therefore I innumerable in pi ce toe indicate that I'm going to use the ATM model directive here. Make sure that you use lower case M here, and the type is actually in high, innumerable off Paice. So I used the inimitable and it expects Paice. Now the type eyes lives in Bethany Spy shop taught models adult pie. So with this line, haven't specified that the model, for my view will be an eye innumerable in pi ce. I cannot write more razor coat in here that will then, for example, loop over this I innumerable I can do that using a for each. I'm going to use a for each here. And I'm going to specify that I'm going to loop over the model major that in this case, the model is upper case. This is basically pointing to that data that inimitable implies that the view is going to get past in from the controller, and that's called this a pie debut. The code inside of this for each lip will be there for repeated for each point in the inimitable off pies. I became outputs of HTML in this for each look. So what I'm going to do, then, going to generate a diff for each pie. And then I'm going to use another razor expression here that gets for each pie the name, the price and the category don't category name there it is in place. We should actually be able to see our first view on Let's take a look. Let's run the application now. You may be a bit disappointed when you run the application and you get this. The page can be found now that is because we're browsing to the route off the application. The view that we just created is actually accessible by going to slash pie slash list. And there we go there we effectively now see the list off price that we had hard coded in the mark by repositories and the reason that we actually need to go to slash vice. Last list has to do with rounding. And if you remember from earlier in the calls in the startup file, I created this route already where I specified that we are first going to pass in the name of the controller and then the name off the action. Hence Hebrews to slash pie. That's an image of controller slash list. That's the name of the action, and that gives me access to my first few. Now we are on a roll here let's do some more. I want to also pass some more data to my view now, I cannot, for example, do a comma separated list off different times here. That's not possible. You want to pass more data? Well, I have a couple of options. The easiest one is doing as follows. I'm going to, for example, also joke a title for that list off price. So what I'm going to do so I'm going to specify that owned the View bank. I also want to pass in, for example, the term into category. Now, the few bank, if you look at this one, is dynamic, so I can add whatever property I want. And I'm gonna set this two cheesecakes, for example. Now this few back is automatically That's a available for my view. So I can't go back to the list of CSS html and put in here a title that shows the current category by calling at view bank. Don't forget at symbol to integrate ality built current category. We will now see cheesecakes appearing at the top and let me surrounded by an H one. There we go. Let's take a look if we can actually see this current category appearing at the top of the page. And there we go. We see trees gates at the top of the page. I'm not really a big fan of fusing view back all that much abanet approach is using something called a view model of Yuma LlL is a class that will contain all the data for a view and the controller will build up. That's few middle and pass it to the view. So I'm going to create quite a few of you models to Mattie scores. I'm gonna group them in a new folder, and let's call that fold a few months. The first few model that will create is going to be the pies list of you model from adding, and you feel here that is just blame class, and it's calling us that buys list for your model. And in here we just had a property for each type of data that we will need. In our view, in our case, we need the interminable of pies and the current category. Let's not forget to bring in a using statement for pie. You. I'm not going to re factor my control instead of using the view back here, we are going to create a new past this for your model and to that policies for mortal instants. We now pass all the data we need. In our view, you pass it the pies coming from the repositories and the current category off course. We also need to update that we are going Do not return the pirate positive that all pies but instead the pies list of your model itself. I have one problem. Our view was still expecting on innumerable in vice. That is not going to be the case anymore. Instead, our view is not going to be strongly typed in the past list for your model that lives in method is by shop built of your models dot business Puma. I need to update the view a little bit. The current category does not live on view back anymore, but instead it actually lives on the past. This to model which is accessible through the model property. Over here, we're not going to look over the model because that's the pious least few model we're going to loop instead over the biases to model dot pies. So that is accessible via model built Paice. Now it is refectory in place. We're in a better position for the rest of the application. Let's make sure that everything still works. That's run the application and then we go. The result is still the same, but we now have a better architecture for passing data between the controller and view. Let's return to the slots.

Adding Different View Files
[Autogenerated] If we create all of our views like we've done so far, so including all HTML, it would be quite hard. Top toh update our site. Imagine that we have to, for example, at a new page in the menu at the top, we would have to operate all pages manually. That wouldn't be a lot of fun now, would it? To some of this, A speeding at court NBC comes with a layout file, which is a template that our views can refer to. It'll contain the general mark up, and other views can place their content inside the layer template. Such a temper. It will typically be placed in the shed folder, a speeding at court. NBC will look in that very location by default. That's again. A convention in our application will have just one. But know that the real life application will typically have more than one layout for, for example, one foot admin pages and one for the public pages. You can see an example off a layer template. It contains the full page market, and it will also contain a placeholder, which is again a razor expression we're using at Render Body Here, which indicates where the view content will be placed, or the next thing is that our views will the need to point to the layered they will want to use. We can do that in every view directly using the coat that you see here but typically will use something called a view start fun. That is another view that will be searched for automatically by a speeding at court. NBC. When a view is rendered in the View start file, it typically plays the code we want to execute just when any of you is called in their on and specify which the ad file should be used. Notice that I don't specify layout. Don't see SHTML We just used under school day out. There was one more special file, and this one has been added with a has been at court, NBC specifically, and it's called the View Imports File. As the name implies, this file is used to include types with an ad using statement. These types with an automatically be known where we added view coat

Demo: Adding a Layout, ViewImports and ViewStart
[Autogenerated] if covered quite a lot of ground regarding the views that is now return to our application and at a layout template. A few start and a view imports file, but I don't like is that we have the hard coded aged amount had body directly. In this view, we can do better. So we are going to create a layout template. There's another convention and that will say that there is a shared folder under views. That folder will automatically be searched when a spin it course searches for a given view, and the layer template is, in fact, a view. So we are going to create a folder called Chet Under Views In There. I'm going to create my layout. I'm going to add in here a new item because there is an existing template for that. Go to Web and then select razor layout, and the default name is again what will typically use underscore layout? That's an early in this layer is the full HTML skeleton that say for the entire page, and it has this at Render Body. The at render body is the placeholder for an actual view. Content from, for example, are a list of CSS HTML is going to be rendered, so we now need to, of course, update the list of CSS. HTML. This one does not require the HTML code anymore. So that's removal that as the output of the list of CSS HTML will be placed inside of the layered where'd Orender body is currently placed? Now there's one thing missing this list don't see. SHTML does not going to the layout that it wants to use that we can fix to something called a view start. Far as the name indicates, a view start Far will be executed every time a view starts, and because of the name that far has been the score for you start. He's been a global search for that file again. Automatically, that's you. Start file can be placed in the controller folded, but if it's like a general file, you can place it a level higher directly under fuse, which is what I'll do here for our application directly here, interviews and then say at you right in and then select razor views. Don't make sure that you leave the default name. Underscore View start Because he's been in court. Embassy is going to search for that particular name. Click on that. And this fine actually contains just one line of code that specifies that the layout for a given view will be underscore Land that is, dis layout here. Notice that there's also no don't see is actually my extension. Here it is. Just underscore layout has been in court. NBC will automatically search the shared folder, which is good, because that's the place where we pleased our layout. That's when the application can see if the letter is doing its job and then we go. We still see our page with the title and the list off twice as one more thing I want to do at this point, and that is clean up the coat a little bit more. Do you remember that we had to specify the full name space here to bring in deep ice? Last few model. I don't really like that, but he's been in the corps, comes with this new thing called a view, imports far. So that's at one of those in the root of the Views folder and again leave. The default name is that is what case Betancourt NBC's going to search for underscore View imports. In here, we can add names, bases using the ant using directive that will not automatically be known in all my other views under the Views folder So I can bring in here Bethany's body shop dot a few miles. By doing this, I can go back to my list and actually remove the name's bass part and just leave the class name. You may need to do it. Built before we trusted your picks this up. You see, now that registered your has after the build found again the pi ce n'est few model off course. It hasn't changed anything in the running application, but our code is a little bit clean your seeming using that your imports for quiet a few times throughout discourse.

Styling the View
[Autogenerated] in the final section off, this model will focus on making our view look a bit better from divisional perspective status. As you may remember, this is what the view should look like in the end. Although it does work, it's not really just the same just yet. That, of course, due to the fact that we haven't added any styling in the upcoming demo will be using bootstrap if every popular CSS library now bootstrap is, of course, a client science package since Visual Studio 2017 with a bit 15.9, and that's also invested 2019 a new tool is included called library Manager using library manager or Lippman for short. We can easily include client side packages from a package source. When the slide here on the right, you can see a screen shot off the library manager. All that we do in the library manager will be captured in a Jason Farm, which gets at it on the first use into the project by default. This fine is pretty simple. We can manually edit this file to bring in the dependencies, or we can use the library manager interface to search for packages and Adam doing replication. Recent updates officials to 2017 and, of course, vicious 2 to 2019. Use library manager, however, over the course off several updates off Fisher Student 2017 mikes. It has changed the way toe at Klein's. That picture's quite a few times originally. That's a bowlful Bauer, but that's not supported anymore. If you are still using an older, not recent, the updated version of VICIOUSLY 2017 adding the packages manually might actually be the best option. Take a look at the ____. It's off the schools where you'll find all the needed funds to continue with your application here.

Demo: Styling the View
[Autogenerated] in the final demo of this model, we're going to bring in support for bootstrap and add styles to make her application look a lot better. At this point, we have a working view, but the application does not look anything like what I've shown you in the beginning off the course. So let's fix that. We're going to add some client site CSS and some images to make our application look a lot better. What I'm going to do for that is bringing Bootstrap a client sightseers, as library. It is very easy to work with. I'm going to do that using the library manager in visual studio. Don't try and doing this with new get as Newgate is not meant for clients. I package management. Hallorann, click on my project here and then say, adds a new client side library that will open the library manager in your set, the provided to CD ngs and then search for Twitter Boots _____, and I'm going to use the tree 0.3 point seven version. Then I get to specify where I want to place this library. I'm going to place it in a certain location called dumped and Uproot that is a known folder for a spin at court application, where it was searched for static files that was configured automatically by the coat called in the program. And I'm going to remove the Twitter part here. I just think that folder bootstrap quickly install, and that will then bring in the depth of the root folder and also bootstrap. What is that? We now have the doped up the fruit folder and in the lip that contains the bootstrap library. Now, why did that place everything under the attempted to uproot? Fold it? Well, let me explain again. Remember that in the start of class in the configuration where we configured the inquest pipeline, I added, use static, fast middleware. That's the one responsible for serving static fans and that will default to serving the first Indian dumdums Uproot folder, in fact, adopted uproot borns to basically the route off the application for static fast. If you, for example, have any special come such image one. It will search for the image one don t pick while inside Dr de Brut. Now Bootstrap, by the way, also has a dependency on Jake way. I'll also add Jake Ready at this point in exactly the same way. So adding new client site library and insert for Jake ready? I make sure that he put that also under double. Uproot my sleep Jake in the assets of the town. Dude, you will also find an images folder that contains some of the images, including the logo and the background that were used in the application. Copy that folder to deductive the fruit folder. At this point, that's the location for images, since they're also static fast finally, also at my own CSS far. I'll create a new folder in which all place a custom CSS fun. So add a new item here Search will see is us and we'll call that side of justice are based in some CSS that I won't be explaining you here. But you can find it in the snippets that come with the downloads off this course. So now I have all my clients had stuff in place. Let's now go and update the layout in the land. Allow point to the bootstrap Library, Jake Ready Buddhist Temple JS and my own CSS file about the way also bringing some custom phones, just bringing in some CSS. It's not going to do any miracles. So we are going to have to replace day stiff with another tiff that basically invokes Bootstrap. I'm not going to spend time on explaining the goat here. We have a lot of good courses on boot. Step here on clear sight. Notice that I do still have that render body in there, and I also have my image, my logo that will not be loaded. Finally, I'll also go to the list, and I'll replace the coat that we had here, with some bootstrap enabled coat to give a batter layered to each of the individual Paice. They were not sure an image, the prize, the name and a short description. And with old is in place, we should now have a much better looking Paige. Let's take a look. Well, I'm happy with the result. This looks a lot better already

Summary
[Autogenerated] Phew! That was quite a lot of work, but we now have a working page that fully supports the M V C pattern. If in this module started from the model with Aditya controller and we finally added the view while doing this, if also seen the layered fun as a template and the View start file as a way to link to view with the template. Finally, if then going back to our pages view coat and updated it so that it looks quite a lot better using Bootstrap, which we've ended using library manager, I hope you enjoyed creating that page together with me and the next module. We're goingto update the code again so that we can now use a real database using entity framework core.

Working with Real Data Using Entity Framework Core
Module Introduction
[Autogenerated] hello when Welcome to another model off pure, a spin in court tree and greasy fun. I'm Jill clearance and also be guiding you through this module in the last module. We have created our first good looking Paige. But there's one thing that doesn't make sense for real world applications. It uses hard coded data. If you remember in the repositories, we put a list of pies and categories in this model will keep working on a ramp and, as a title of the module is giving away, will be adding support for entity framework core to our application. Animal does be using a real database to get hold of the data. Most of the changes will be doing in this module will be focusing their fur on the model more specifically on the repositories. So by the end of this model, I have pretty much the same application. But now running on top of a real database and using entity framework core that's kick off the Marshall again by taking a look at what we will be covering in this model. Just as a quick introduction, I'm going to give you the basics off entity framework as an autumn as well as introduce you tow F course. So the version will be working with in this model. Once we have enough knowledge about the free word, we'll see how it can added to our application. After that, I will show you how we can, through the use of F court, initialized the database from coat. Finally, we'll finish the module by looking at the approach we need. Tufo. When we modify the modeling coat, I will see that we use migrations for this.

Hello EF Core
[Autogenerated] so as promised, we're going to kick things off in this module by exploring what entity Frederick Core really is and what it can mean in our application. If you are already familiar with earlier versions of entity framework, you'll pick up what has been changed with the doc, that cool version of the framework. So stay tuned. You probably have heard of anti family already before, perhaps in the context off plane, a spin at every see where it was also often used, and the former Gore is really the core. Let's say the next version of Entity Framework, the OLM object relational member from Microsoft and OM will allow us to work with the data in the data base without us having to write directly any sequel statements in most cases, and basically allows us to work with types that will. Behind the scenes, we persisted in the data bits, just like previous versions of Entity framework. Yes, Core will allow us to work with links, statements to interact, read or data. If core is a very lightweight framework and can be a good companion in combination with a speed in its core NBC. What complications? I just like Don't let Gore and SP genetic or He, of course, is also working and across that four way, so it will still allow you to interact with the database. Also Lennox or other platforms. Also again, Just like the Manticore itself, of course, is over. Source. You can find the source good on, Get up. If course supports working with sequel server, that is basically that, say, the default for a SP genetic or applications. But we're definitely not limited using only secret server. If court allows us to work with other databases, even known relational data stores are supported. Rather, it is not the focus of this course. It's definitely interesting to give this in mind if the requirements off a project force you to use a different type of database. One thing that's also important to keep in mind compared to previous versions off Entity framework is that E F core only support a code first based approach. A database first approach isn't supported any longer. This doesn't mean, however, that you cannot have the model be generated from the database that is still supported. What isn't supported is the media makes based a brooch. If you're still a bit unclear on the roll and go off on OM such a CF core. Let me explain in a bit more detail. In order to work with the data in the database, we get sequel statements in our code or call a stored procedure that resides in the database. While that approach has worked for many, many years, on O. R M can make the life of a developer so much easier. Developers typically like to work with classes an object, And that's where he, of course, comes into the picture. The order really sits between the coat and database and will map the objects we having coat with data in the database. This enables us as developers to focus on the code part and not so much on the database side of things. His moral example. In our application, we have a type called Pie with own. There some properties through E F core. This type will be mapped to a table in the database where you can see the properties appear s columns in a table. He, of course, will typically take care of creating this table for you based on the properties of the pine class, it will figure out what types it needs to give to the created columns. He, of course, is quiet a few conventions as well. For example, on the bike laws, the property with the name I D or my I d world by default become the primary key in the database. In our code, we cannot perform operations with by instances, and he, of course, will update the corresponding data and table in the data base accordingly.

Adding EF Core to the Application
[Autogenerated] Now that you have an understanding of what the purpose of F core really is, let's see how we cannot include support for youth corps in our application. I'm assuring you most of the changes we need to make the application in the upcoming ______, since, as you see, we'll need to perform quiet a few steps to make things work. Let's start by listing out the steps will need to do to auntie, of course, into our application. Of course, we'll need our domain costs. Remember that I said that if you're only supports code first, based on the the main recreate, it will ask f core later to create the database. Secondly, we'll need to create a database convict class. These girls is a very important role in the way that we work with Entity Framework, or it can be seen as the intermediate the bridge. Let's say between our application skirt and the actual database it manages, the entity objects during the run time off the application so it will populate objects with data from our database. It'll perform change tracking, and it will be responsible for persisting data back to the database. You can see part of the code of the database context, which I have named Abbe D B context. The glass inherits from the D B context based close that's required. It will typically exposed D B set properties for each collection off entities it is exposing or managing. Basically, adding a D B set property will be an indication to F core that there will be a corresponding table in the data base in this case, the pie table. Through this property, we can access the data and the values therefore in this table. Next, we'll need a way to let our coat know how we can connect with the database and, quite logically, will use a connection string to do this in previous versions. Off dot net So normal that court we typically placed this inside of the Web. Conflict for that has changed with boat ____ core the connection string but not typically placed in an upsetting for Jason Far most need to make some more configuration changes in the start of class. You can see part of the upsetting sport Jason file containing the Connection string, and I've given you the key default connection with the connection string at it we now need to let her application. No, we're going to use the F score as we have already seen. To do so, we need to register. The service is for this. With the service's collection in decon Figure Service's mattered in a start up close here I'm using at Debbie Context in Abdi Bey Context Have the contact was our own created D B context class containing the D B sets. Then, through the options we specified that are going to your sequel server and his connection string, we used a specified default connection. Finally, to get f court toe work in our application will need to bring in some packages. Know that this is only needed in a Speedo netcord tree 0.0, in a spin at Court 2.1, you can simply omit this stuck. I'll show you how to do this in the demo

Demo: Adding the Packages and Creating the Context
[Autogenerated] all right. Time for demos in this demo will start with adding the required packages at the D B context ankle figure application correctly. And then we'll update our existing mock repositories Do now work with F Court. Let's do this. So, up until now we have been using mock data, so let's not start changing that in this demo. I'm going to show you already how we can configure our application. So Hee, of course, is correctly set up in the up starting. We don't need to score three. It's actually required again that we had references to entity framework core new get packages If you're building an application with a spin at Court 2.1, this step is not required. So we're using the F Score three and SP, not the core three. We need to add the correct you get packages so under dependencies, go to manage to get packages and they need to search for Microsoft Entity Framework adult sequel server that's installed it. We also need to bring in the Microsoft Entity Framework or Tools package. These packages are enough for now. The first thing that will do in code is now adding our __ Context has explained in the slides. The __ context is really going to sit between your coat and the actual sequel server database. It's really the manager that sits between our coat and the database, and it will be responsible for reading out data from the database and also persisting data back due to database. So it has to do with the model so off course we'll end it under the Models folder. I'm going to go here and add a new cause, and I'm gonna call my context __ context Step one is making sure that this inherits from the D B context clothes by default. We just did. You won't find that you need to bring in the mix of tentative framework or using statement here that actually relies on the package that we just had it at. A __ context must have an instance off debate context options for it to execute. And we can do that by using this constructive here. An excellent IMDB context indicate which end it is. It is going to manage and behind the scenes that will, of course, also map to relate of a stable in the actual database of course you are goingto ask it to manage our price. So to do that, we're going to create a new D be sent in pie That's gonna be vice ever to be context. We'll also need to manage the categories hands we also created D be set for category and rename that categories transmits the debate context sits between our coat and the date of its How do we find our database? While the database can be connected with using a connection, Street in, has been in court and received were only placing connection strings anymore in a country far like we've been doing for years with Plane is Benet or play needs been at NBC instead, we will please the connection string in the upset things with J. So far, this is a J so far, and I cannot add the connection strings entry. By naming this connection strings, it is automatically know, do a spin it core, and I'll show you how that is done in just a minute. Under Connection string, we have the default connection, which points to a local database that we don't have yet will come back to them, and I've placed a database on my local D B server. Locally, B is an option that you can install together, which feature studio. It gets installed by default. Typically enough, my database name and I will use the trusted connection so I will not use sequel server authentication. It is in place. It's not a time to actually configure our application so that it knows about Entity Framework Court. And where do we do that? Well off course. In the start of file again, we need to go to Decon Figure Service's method in here. I'm going to add the correct service is so that our application knows about entered Frederick Core. It's actually pretty simple to do. That only serves its connection. We call the extension that it had to be context, which, by the way, came with the new get packages that we added. We passed the type of our __ context that is the ABP context. And then we also specify in the options it needs to use sequel server. That requires me to add another using statements. Now Replication knows it needs to use sequel server, but Fisher Studios still flagging and ever here because we need to passing the connection string. How do we get that connection String from the upside Things Wil J so far. Well, very good question. The upsetting that Jason file is like a special configuration file. It is known to a S P. Net core. In fact, when we go back to the program clowns and we go to the implementation of the create default builder in his documentation, you could actually see Dad the upsetting till Jason file was automatically going to be read out. If you want to read another file, you need to do some manual configuration here. But we'll use the default. Now. Where is that configuration then? Going to end up a spinning core uses a different way off loading in configuration settings. My default. We saw that at upsetting fund gets read out, and it will arrive in an instance off I configuration, which gets passed into the application via constructor injection. They're in this configuration. Object will have access to the properties which are set in upset. Things he's been at core can also read out configuration from utter inputs including, for example, start of perimeters. But we'll stick with upset things here now using configuration, I cannot ask my configuration to get the connection string. That is why I said earlier debt. The entry connection strings in upset things is actually like a known instance. My night call here configuration of get connection string automatically. It will read out the connection string from the APP settings, and it was Search for the connection string named Default Connection. And it will be the one that I use for the communication with my underlying secrets over database. Let's do a bill to check that you haven't introduced any Harris here. That seems to be okay. So at this point, E f core is correctly configured in our application. Let's go back to the slides and see what are the next steps.

Querying and Modifying Data
[Autogenerated] with, Of course, Adit. We now need to work with the data as mentioned earlier. Already were used link for this and it's never to see her on the slide. You can see I'm using the buys property on the context close to get access to the pi ce in the database in this case. And don't just want the pi ce I'll also want to related category that abi belongs to. I indicate that here using the include method. Finally, I've also specified that I don't want to get back all price. I just want those where the East pie off the week property is set to true you have core will translate this in the most optimal credit and sent that one off to the database. Resulting entities will be accessible via the pies property on the debate context, the context is to be used for caring for data, but it's also be used when we want to make changes to the database. For example, I wantto insert data at this point, our application can only visualize the read on the list off price. Very soon, we'll start adding code that will insert an update items in the database as well, such as shopping count items. You can already preview a snip it off part of that coat. Notice what I'm doing here. I'm creating an order detail instance, and I'm then adding them to the order details property on the context. When I'm done looping all items in the basket, I'm goingto commit my changes. So my added entities, using that safe changes method, this will make sure that the list off entities kept in memory by my context will get synchronized with the database.

Demo: Creating the Real Repository
[Autogenerated] that is not returned to the application and update the repository code so that we can work with really data in the database after the previous demos. If course correctly configured. So now we can continue it. Introducing are really repositories as go back to the model folder and our ad a riel implementation for both the pie and the category repositories. I must start with the pie repositories, adding you Klaus here, that's going to be the real pirate puzzle. Teresa have called it by depository, Just like the book depository. This will implement the AI Pi repositories interface. And so this pirate positive is going to work with our empty be context and so will introduce a private read only field for the Abbey contest. I will call that empty be context, since revenge is that our __ context here using at tbe context owner serves his collection. This is also managed through the dependency injection container. Therefore, we can in our repository now simply create a constructor and two constructor injection. We will get access to the abbey context in our pie repositories. I cannot hear, say Abdi Bey. Context on local field is equal to the one that gets injected. That's the affidavit context over here. So because of dependency injection, it's not really simple to access the Abdi Bey context, which will be the intermediate between our coat and the data, please, at a pirate Positively well used to be context for persisting and reading data from the database that is not implement the interface that's first implement or place. This is properties I'm going to do get here and what am I going to return here? All my family be context. I'm going to ask for all the pies that was a D B set under the covers is actually going to send off a sequel. Crary, that will read out all the pi ce This isn't the be set itself if you remember the pie Close actually also had a navigation two categories and actually want to get the categories because I want to visualize information from D. C as well. So what I'm going to do here is I'm going to ask You also includes the category. In other words, it's going to read out the pi CE and for each of the pi CE, it's also going to rethought the category and it's going to do that on a database level harder than in Coat is going to make sure that the database performs the optimal Cray. Now it doesn't find include just yet. I need to bring in using attitude Frederick Court and what am I going to include? Oh, I'm going to write a lambda here that says I also want to include the category for each of the pi ce. The implementation off pies of the week is actually hard A similar. So let me coffee place that in here and now ask using a link crazy that I only want to get the pies by the spy off the week. Is that the truth? You're gonna use the wear here, and I'm going to specify that I want to get the pi ce where the spire of the week property is actually true. Getting an individual pie by I d. I'm going to do in a very similar rate. I'm going toe on average, the context of vice collection ask for the first by the idea is equal to the given i d. That's not implemented category repositories, which is also going to be a plane clumps it needs to implement. I can't go Proposal story, and I paste in the court for this one. And this is very similar to the pie repositories. The only implementation is that all categories here, which is simply going toe on the cab. Debbie Context, return all categories. Now it is in place. We cannot go back to our start up. And Saito are implication that when we now use the pie repositories, we don't want to use the mock version anymore. But you want to use the real one, and the same goes for the category repositories. With all these in place, we're now actually ready to start using our application using a database. Let's run the application and see the result. I can't say I'm really happy redid. We're getting an exception issue. See here it says that it cannot find the database that we specified in the connection string. The Logan failed, but if you think about it, we don't really have a database just yet. Just added a repositories. But we didn't really create a database, let alone that we have any data in there, so we need to do that next, and it's going to be the girl off the next demos. By the way, the fact that we actually see this exception here is because in the start up close, we had specified here that if we are in development, which we are, we are using the developer exception _____. If it would not have blood in this middle, where would have just in a blank page at this point? So this is really useful during the development face. So let's not go back to the slides and see how we can actually let Eve core create and update the database.

Creating and Initializing the Database
[Autogenerated] where we tried running replication. We got an error stating that we didn't have a database just yet, and that is correct. That's not see how we can create and initialize the database. Next. We aren't managing the actual database ourselves. Instead, if court is doing that for us, so we need to ask for E, of course, help to do this. F Core comes with something called Migrations to support this. A migration will be created by E, of course, and it basically is just code that it will execute to bring the database model in sync with the domain model. Initially, this migration will does create the goat to create all the tables we need to have in the database to map to our domain entities. Creating migrations can be done through the package manager, consul in Visual Studio. There are two commands which you'll need to remember in this context, adds, migration will be the command that generates the migration coat that can bring your database in sync with the model that you have created. Just creating the migration, however, doesn't bring your physical data base up to date yet. Only when you run the update database Command will seek a script coat get executed against the database next to creating the actual database. We can also use F course to populate the database with some initial data in our application coat. We can check, for example, if some data is already in the database. And if no data is present world and we can insert pies into the pie table in the data base, the way that we initialize the database with data has changed since SP Lynette Court 2.1. We cannot use the has date omitted to seat data through a migration, and that's what we'll do in the next demo.

Demo: Creating and Initializing the Database
[Autogenerated] well done. Time for another demo. It's now created database and seed it with some initial data. So we need to create that database. We are going to do that to the package Manager comes. Although you can also do this via the sea, allies will find a command line interface. I'm personally more a fan of the package Manager of Control. But it's a personal preference, really. The Beckett's manager control is available down here on my machine. If you don't see it, go to view and then are the windows. And there you'll see Package manager comes right over here in here. We're going to not create a first migration. And I'm going to do that using the command and migration. And then I also need to specify a name as it is, the first migration I'm going to be creating uncalled is the initial migration it enter and now registered. You will create for me the migration coat. If you go and take a look. Now you will see that a new folder was added to your application. Over here, you see that it has created the initial migration clubs. You see it over here as well it inherits from migration, and it has two methods. Up and down. Up is really going to contain a coat to bring the applications database in sync with the applications. The main down is basically going to revert the migration. So in here you see code that creates two tables on for the categories and one for the pies. And for each of these, also, the columns have been created, as well as constrains such as primary keys. Now, just creating the migration has not brought the database in sync just yet. We still need to run that migration. So I'm gonna go back to my package manager console and now update the database and then I use through the database command. No extra perimeters are required at this point, so we simply enter and migration will execute against the database, creating the corresponding tables. You can actually take a look at the executed sequel statements over here. Maybe it's more interesting to take a look at the result in database, So go to the sequel server Object Explorer, and in there you'll find the local D. B. Instance on there, as you can see, have quite a few databases this one is actually the one that we are connecting with, because see that we have the categories and pie stable in here. That was the one that I referenced in the connection string in my upset things, Father. Now these implants have to run the implication again. And as you can see, the application is running again. I don't get an exception, and emotive can't find the Secret Service database. But of course we don't see any pies anymore, which is kind logical if you think about it. We have a database, but we don't have any data in that just yet, So let's do that next. There are different ways off adding or seeding data into the database. But I'ma show you a way that was introduced with a spin it Court 2.1, and it's still possible and recommended way, by the way, in a spin in court Triple toe. Go back to your family, be context in there. I'm going to paste a snippet that will create data in my database. If there is no data in there just yet have now created an over and off the own model creating met the on little creating made. It is a method that we also can use to go figure how the actual Secret Service database should be created. But it can also be used to seat data. And that's exactly what I'm doing here. I have written code here that when we now do, a new migration will be translated into see quick alert that will then be inserted into my database. I'm going to add a couple of categories again. It's against you here, and I'm going to do the same for the pies are going to load in different vice As you can see you. This coat will run when we do a new migration. So then do another migration by calling again at migration, and it's called it See data at it. And now you see that the migration was created, which in its up method is going to insert in the categories and in the pies. All the data that we asked it to create and down made it. It has written code that can remove that date again. If we now do another database, this data will get inserted because Fischer stood. You will notice that my coat is not in sync anymore with my database. It sort of threw it. Update the interviews again. As you can see the day that was not inserted. Let's run the application again and there we go. We now have a long list off bias that is red from our database. Perfect. That's why we needed to get.

Modifying the Model
[Autogenerated] in the final point of this module. I want to discuss how we can cope with changes that need to happen with the mole. How can we then update the database model from coat that's taken? Imagine that we need to make a change to the pie domain clause. For example, a new property needs to be added. Since the F score has created the table in the database. We shouldn't manually go and operate the table in the data base ourselves, but still will need to update the database again. This can be solved using a migration. We can run the at Migration Command again to generate code again that will contain the new mapping and maybe then render up the database. Come out again. The database will be brought in sync.

Demo: Updating the Database
[Autogenerated] in the last them off this model at stake. Look at how our application can cope, but it changed to make to the model, since the databases not managed entirely by if court, we need to use my creations when we make changes to our model. Imagine that we make it change the party clothes and in a real application you will make changes to go domain classes. So imagine that I'm doing it here as well. I'm going to aunt on my pi class, a new property notes, and it's going to be a type string. We want to make sure that e f course great corresponding column on the pine table in my database. How can you do that? Well again, we will need to create a migration. So go back to the package manager console and in there we'll add the new migration. Let's call it notes, added some pie. It generated migration. We indeed, yet in the up at that it is going to get to the pie stable at a new column called Notes Off Time Stream. I would now do update database that migration will be applied. I will have that extra column in our table. Take a look at the data base again and we do a small refresh. Here they look a bi stable and columns. We'll see that The notes column. Hasn't he been at it?

Summary
[Autogenerated] and we have reached the end off another module and do a small recap off the most important learning topics in this module. We have seen that with F core recon and support for working with a real database in our application. He, of course, is the goof around off entity framework. One of the biggest change is that we have seen is that F core only supports a code first approach, which is what we have off course used in this course as well. It also seen how we can make sure that the model and the physical data base remain in sync through the use off migrations. Up next is adding navigation to our site. We'll need more than one page, of course, and that's exactly what we were doing in the next module.

Adding Navigation to the Site
Module Introduction
[Autogenerated] or rent. I'm ready for another model in the building replications with a SP lunatic or tree point of coarse hair on blue. Recite. I'm Jill Karen, and in this model we're going to extend the application some more. Up until now, the application just had one bait, and for a real application, that is a pretty low number. So what we'll do is see how we can navigate to another page in our application. I'll be explaining you how we can add navigation in an A speeding with Court NBC site. Good traditions never stop. And so we'll start this module as well, with a small overview off what we will be learning in this model. First, I'll be explaining you how the rounding system in a spin on that court, NBC Applications works. Then look at how we can configure the system briefly. Finally, after we have all understood how everything works, we'll make some changes to the application animal and support using Tak helpers for navigation

Understanding Routing in ASP.NET Core MVC
[Autogenerated] So before we add supporting the application for navigation, let us understand how everything works in a speed, innit? Court, NBC itself. If you think about the traditional way of browsing toe a page on a server, basically what happens is that you make a request. For example, for Final one, a speed another Web forms uses dis approach. For example, what happens on the Web server, he said, to serve a real search for that file and when found, that file will be sent back to the client. What's important to understand here is how the request is handled. A request is made for a file that physically exists on the disk, and when requested, and that file is found. That file will then be returned to declined. When we are working with a spit in that court. MPC things are happening in a completely different way. Remember that when using NBC, requests are handled by actually methods on a controller. So when I request, comes in and receiver now need to map the request to the correct action on the correct controller. Although what is returned in the end is a view file ending and CIA's HTML. The UL is effectively targeting an action method. There's no link anymore between the incoming request and the physical file in our application. The question then remains. How will he has been in a court? NBC know which controller and which action it needs to invoke. Well, the answer is a process called Routing, and it comes with a spin in a court NBC built in. So, in essence, the rounding mechanism in a spinning at court. NBC is an M V. C specific feature that will map a request for certain You're high to an endpoint within the application. It works because we have added middleware in the request pipeline in the very beginning. We already did that on a show You that in the demo. Maybe you remember that in the configure meant it off the start up close, I added used rounding and use and points. Well, thanks to these middleware components, the routing system is enabled in replication. In there, we can also go figure one or more rounds for the application will see that in the ____ it is Internet court. NBC can also generate links based on the round information, so outgoing links that are going to be part of the rendered H Chemo is between. The core comes with two types of rounding built in, namely, convention based Rounding and Attributes based Rounding. Convention based rounding is most commonly used for NBC. What applications, and that is also what we are going to be using here as well. And tribute based rounding is mostly used for AP eyes, but we're not covering that in discourse. If you have been using A S P net core before, you noticed that some things have changed in the rafting space, among others. The name of the Middle West components that we need to add to a neighbour outing has changed. We'll see it is in the upcoming ______, No, ____ for also that if you're using, he's been in a court to 0.1. The Miller is different. Take a look at the ____ it off the course for the correct to 0.1 middleweight components that you need to end dressed of the coat that will use is the same in a spin at Court 2.1 and Espionage Corps Tree, so the difference between the two versions is minimal. So how does rotting wood rotting is based on routes, which may sound logical. E drought is a you're out pattern, and that's mapped to a handler. The handler in the case of NBC, is the action on the control. The fact that we can use patterns for our rats means that we don't have to type all the possible routes for our application. What will happen is that your eyes are compared with these patterns, and when the match is found effect, I should say when the first matches found. That pattern will then be used to trigger the corresponding action. Take a look at his basic euro, but in his parachute dot com slash by slash list. When we look at this, you're all we can see that it's effectively made up out of a number of points. The host. So that kept up. But in the spy shop dot com as well a spy as well as a list these parts are known as segments. Typically, the first part after the host will point to the controller, and the second part will point to the action off course. We have to explain this somehow to the routing engine. It's not something that is that they enabled by default we'll have to create a route that says that when you were held with a pattern with two segments is encountered that will assume that the 1st 1 is the controller. And the 2nd 1 the action. You can see the pattern that you want to use here. Controller slash action. The road we just saw, also slashed by slash list will therefore not be handled by the list. Action on the pie controller. As you can see here, this action does not require any perimeters, but sometimes we'll need more segments in the rent. Imagine that you want to view the details off a pie with I d one. The request could be slashed by such details slash one where now the last segment has been added. Well, allow me to add an extra segment in the round. As you can see here, the idee segment has now been added to the pattern at that requested just so I can be handled by the action. You see here the details action now has received an I. D perimeter and by adding the extra segment is not possible to get this value passed into the perimeter off demand it

Configuring the Routing System
[Autogenerated] they should already give you an idea about rounds in a speech in, Of course, MBC. That's now see how we can create these rounds in the coat. I already mentioned that we need to configure our application to enable and support rounding. You can see a snippet, part of the configure matted off the start. Of course, I am configuring ratting. First, we need to bring in rounding middle way to use rounding. But then still, you may be wondering how we actually saw our page so far. Well, the answer is that we have asked Espionage Corps to configure our sight with a D fold around that, say, by calling in the startup use and points we actually passed in a very generic round that will work for most applications are using methe controller rounds I at a convention based route to my application, and it has a pattern that we have already seen controller slash action. So basically all requests that have this pattern cannot be matched using this pattern, and the controller in action will be extracted from the request, you or I, and then forward onto the controller and its action to have it handled most applications will have multiple rounds defined. The matching system was sequentially Run tau, all defined patterns and the first match will be used. If you have multiple rounds there for the front, it's important to ensure that you have them in the correct order with the most specific ones at the top. As I already sent a speed into court to 0.1 uses a slightly different way of configuring the application. He will use used M V C and passed around using the map round method. The net result, however, will be exactly the same. Weaken doom or with the created round. Still take a look at the snippet you see here you can see 1/2 now defined values for the controller and the action segments, the ones that are highlighted in green. These are round defaults for the control of this. Is that to the whole man for the action? It's that too, in this, when a request comes in that does not specify a value for the controller nor the action part. Every sea will use thes defaults. This will allow us to send the requested the root of the science of Ethan's passion dot com and automatically that in next action on the home controller, Rule me execute. It's of course, possible toe also pass, for example, that third segment we already saw said that we need to pass a value such as a selected by in the list of the detail. Page knows which details need to be shown. The Belgian you see here, where the idea Bam Edie is added, will allow us to do that in the controller action. We now need to get in this value for the pattern matching to work. The action needs to be defined with an i D. Pam it, as you see here through a process called model binding the value off I D in the yurt. I will be passed to the action perimeter you see here we'll talk more about model binding and its many options later in the course. But keep in mind that full now it will make sure that the value you pass pretty request will arrive here in this Pammy here. The third segment also has in noticeable character the question mark. By adding this value, the segment now becomes optional. It's not required to be part of the request for the pattern to still be a match. Because we added this this around cannot be used for both requests that included ideas, segment as well as requests that do not the do your house, you see it on the slide will match this round. The 1st 1 does not have the I D segment and the 2nd 1 has it. But since the segment is defined as optional will have a match for this route with boat requests, it is also possible to check the actual content off the segment. We can put in constraints to restrict just any value turning the euro into a match. You can see an example of this in this light noticed that for the last segments have now added int. The guns trained part is actually the end part. So the part after the colon, with the constraints now in action that will not be a match if the long segment is not an in teacher value or it cannot be passed into one

Navigation with Tag Helpers
[Autogenerated] Now that you understand the basics of how a speeding at court NBC handles rounding at stake, look at how we can add navigation to the side. I'm going to be doing that using something called Tank helpers for the user to be able to navigate, we need to have the correct links that, when clicked, will send the request to the server that will then be handled by interrupting system in the way we just looked. We don't need to generate or write these links ourselves based on the rounds we have defined in the application. Espen Encore, NBC World Generate the correct links. That is basically that, say, the second task off the rounding engine generating links. If you have worked with that's a plane exploded at everything, you will have used an HTML helper for this, and you can see one here at the top of the screen. Basically, an HTML helper will take part in the H demand generation process, and it will, based on the values you pass it and the no no clouds in the application generate the correct link. HTML. Help us, however, are knocked away for it. And while they still work in a spitting at core NBC. We now have something new called tank helpers. You can see an example off a tag helping here. That does exactly the same. It will generate a link, but what exactly is a tank? Help for them to create a link. In our view, Coat will use tak helpers, a feature added with the first release off a spin and ______ NPC. A Dag helper consists out of market code that will execute service site and we use it in our market goat. It will trigger the execution of Kurt in this case, the generation off the correct link this way from Razik. Totally Candace. Trigger certain functionality to happen. NBC comes with quiet. If you attack, help is built in. I will see some already in this module. It's also possible to create custom back helpers. They are an extension point. I will see that later in the course, as we saw in the previous slight tank, helpers mostly replaced HTML helpers, which we inherit. The Trump previous version of NBC using a tag helper, will result in much cleaner razor HTML code compared to do old HTML helpers. That is definitely a useful feature for people like the designers on your team who need to lay out the HTML in your razor funds. The reason that I'm now all of a sudden starting the explanation off tank help is is that will be using them for navigation will see through the cause of the following modules that they are often used for our tasks. But that's now focus on navigation. Take a look at the code snippet. You see, here I am generating a link using a plane anchor tank on a tank. I want to have has been in a court, NBC generate the correct ling based on the route. All routes I have in my application defined. I can do this using a tank helper. In fact, using to contribute tech helpers, the NSB controller tank is set to pie, and the A S B action tank helper is set to list as mentioned Tank harvest, regular execution of coat. So when this view code will run, it'll drinking code that will look at Durant's we have in our application on based on these generate the correct outgoing link. You can see the generated good with the link that we have just created. Based on the routes we have in the application, the correct ling will be generated. Thanks, Dude. Tank helpers The link indeed will now navigate duty list action on the Pike Control to bring in support in general for Tank. Help us into our application. Will need to comb and Tank Helper Now we can do that in every view file where we are going to be using tank helps, but there is a better way. You'll see that, by the way, will use thank helpers almost every race review. Remember that we have earlier in the cause added the view imports file. Well, it's purpose is bringing in name spaces but also directives globally within the application so that we don't have to call it in every page. You can see the updated view imports from where have not added a call to at Tank Helper passing in the name space were all built intact. Helpers off SP Kenneth Court, NBC will live in this will allow me to use Tak hampers across all my views in one go to cover all meaning to do around navigation. A speeding and court NBC three comes with some extra tank hovers. You have already seen that SB Controller and SP Action tank helps. We'll also get the ace be route and then asterisk tank helper, where we can replace the asterisk with the name off the perimeter. For example, I D and Ambassador Value. We'll also have the ACE be round tank help that's can be used to force a spin at court NBC to use a specific route by name. It's a tank help I typically don't use very often.

Demo: Adding Navigation
[Autogenerated] now that you have a very good understanding off routing in a Speedo netcord NBC and you have already a basic understanding off thank helpers, that's we turn to our application and include support for navigation. When you currently browse to the home page to local host on the port number, you don't see anything. It's only when actually go to slash party slash list that we see real content. The fact that we need to browse to flash by slash list in order to see something is because we have already defined some routing in the application earlier. We already did that earlier in the school, but I'm going to explain it in a lot of detail in this month. So in this demo on I'm going to be doing is add support for navigation not only to this list page, but also to the data. Which are we going to be using tag helpers for that? So let's go to the court Indy configure method in the start of clams. We already configured earlier the routing system, Which is why, if we bro stoop ice slash list, we actually see something. We actually see the list off parts we did that earlier already in this course. So here you see that I've plucked in use surrounding that is middle, where it is going to enable M V C. Routing in our application is what is known as convention based rounding that we're going to use. Then we also added use and points, which then accept a collection off endpoints and points are really things that were going to be navigating to in our case. We're going to be navigating to actions on controller matters, and that is what we have here. We have defined at this board. Just one route do an action on the controller method, which goes by the name default and has a pattern that contains three segments. The 1st 1 will be the part that points to the controller. The second part points to the action and the third part Bones Dugan optional I. D Perimeter have also defined for the controller, a home default and an action in this. That means that if we now promise to local host without just anything, we actually navigate to the home controller and the index action, because those are the default. But you don't have those yet. We'll do that very soon. Now let us focus on reusing the navigation a little bit. So what I'm going to do first is add the detail page for a pie. I'm going to allow us to click on a fine name and then navigated the detail page using this route. So what I'm going to do is I'm gonna go to my pie controller and on there I'm going to create a new action that will be the details action. So that's the deed of action and that will take in on I d. I need to know which by I'm going to show the details off. So what I'm going to do here as I'm going to use my repositories again, and I'm going to use it to ask for a specific pine. So I'm gonna go to the private puzzle during that. We've got to find constructor injection and I'm gonna call my get bye bye. I demanded passing in the I D. That we're going to be getting in via the route in just a minute. If that guy cannot be found meaning that it's no, I'm going to return, not found. So in other words I'm going to send to the client bag A 44 not found in most cases and hope that we get in a pipe I d. That actually does exist. So then I'm going to return a view and I'm going to pass in the buy that we actually found fire the repositories. Now we also need to create an interview. We have the details. Action mattered, but we don't have a corresponding view yet. So let's go back to our views folder and that's in there under by because this is an action that owned by controller. Create another view. And do you know the name from this one? Indeed, that should be named details. So it creates another race of you and name that details because, of course, the action method has the same name. Now what is this view going to be typed in? Well, we are passing here back a pie so off course, the model for this few should be indeed by at this point, Frasier studio says, I don't know pine. Well, let's go back to the view imports file and let us also bringing a using statement like we've done before for the few models, but now for models. And now, if interested, your alter sometime will be happy. Maybe we'll need to do a built before it actually figures out what by is all about. So next I'm going to bring in the layout for the detail page. Have you don't know snippet here that is going to show me the details for her pine? I used a model name. So that's going to be the name of the pine. I use an immature L. The prize, the name and the short and long description at the next thing that we need to solve is how do we actually get to this detail? Pinch. Now for this, we actually to bring in navigation. And as mentioned in the science, we are going to use tank helpers for that. Let me first bring in support for the tank. Help is the built in tact campers. Let's go back to the view imports file and we're using the ad that camper directive I'm going to bring in old thank helpers that live in the Microsoft A Spinetta core NBC Tank Helpers assembly. I'm going to use the asterisk to indicate that all tank happy that are living in there should be at a treatment available that, say, to defuse that I have in my application. So we don't need to go back to our list and we're going to update this link here which committed doesn't point to anything so that it allows me to click on it and navigate through the detail page. So we're going to use a tank. Help us for that. And it do indicate to last minute court every see what is going to be the action on which controller it needs to navigate. Do when I click on this link for that, we're going to use tank harbors. The first bank helper is SP Dash Controller That last me to point to the controller I want to navigate to and is going to be the details action on the buy controller So the second tank happen will be a SP dash Action Off course details. If you stop here, the writing is not going to work. Remember in the start of class that I have defined this round here is default route that has three segments controller the action and then the optional I de ponte I indeed need to passing. Also, the I d on the pie controller have defined an I D perimeter. Give in mind that the name has to be the same for boat this perimeter and this segment here in direct. If we want that value to appear in this Pammy, we need to add another tank hopper That's going to be the SP dash route. Back at the needle passing, I descended the name off my perimeter felony to passing and value is going to be on the pie the bi i d. Let's not test is out in the running application When we go again to pie slash list, We now see that the links here on clickable note at the bottom of the screen that a link has been generated that goes to slash by size details and one for days. It will be part of details to that's click on this delicious looking cheesecake here. Now we go to the detail page me, that looks really good, but any man can't get distracted. So now we actually have arrived here on the detail page and notice that we actually browse, do by details to this should already give you an I d on the navigation at me. At one more thing here, I'm going to go back to my layout in the land. I already want to bring in a small navigation menu. I'm going to use another snippet here. I've now added a Neff Bard, which will show at the top of the screen. And in there I have a Dave that will contain a UL and on ordered list for Ling that I will have in my navigation bar. I'll add in an Ally a list item containing hyperlink. At this point, we only have this single high blink in there that will go to the pie controller and to the list action. Let's see that in action. So we now go back to pie specialist. You see that? Indeed. Over here, a link has been generated in our navigation bar. That takes me to buy slash list, which is this very page, of course. So they should already give you an I. D own navigation and how the tank help us help us to build up correct outgoing links in the next models will actually be having quite a few other things around navigation

Summary
[Autogenerated] let us summarize what we have seen in this module. We started the module by looking at how he's beginning to court tree. Every sea will actually round an incoming request to an action method on a controller. We have learned that patterns are being used for these two Jack if there is a match. Secondly, we looked at how tank helps can be used to create correct outgoing links so that generated HTML can be used to navigate to another page we're making good progress in the next module will be an inquired a few other features to our fuse. Let's take a look.

Improving the Views in the Application
Module Introduction
[Autogenerated] hi there. And welcome to another interesting module in the building replications with a speed Annette Court, NBC course Here in blue Side we can now navigate drew a basic set off pages we have in the application. But that's off course. A lot more we can do in this module, which have named improving the views in the application. I'm going to be an in quite a bit of functionality and more pages as well, Fast, and you seem out by the end of this module, you have a more extended version off Bethany. Spanish up already. Let us dive in. Let me give you an overview off what we will be learning in this model. We'll start with learning about something called partial views and will use them in the overview page and the homepage. Next, you will be adding shopping cart functionality to our site. This means that we'll have to add a shopping count of you, but we'll also need to make model changes using migrations like you've seen in a previous model. Next, I will introduce you to view components in a spin it court NBC and we'll look att du vieux components that it will be using in our application. Finally, we'll look at the creation of a custom tank helper to finish this marshal.

Using Partial Views
[Autogenerated] as mentioned. I'm going to start by teaching about partial views. Interviews will encourage reuse of coat, and that's always a good thing. Imagine that you have do different fuse in your application. In our case, this could be the list page, and we see a list off pies and secondly, the whole page where I'm going to show a number off promote price in both views on Egypt could visualize a pie with its image, short description and the price. If we were to read these two views completely redound, reusing coat. I'll basically be creating same Kurt twice for the visualization off the point. That is not a good thing, now, is it? So say hello to partial views. Partial views are like a fragment of coat and canned and embed in several places, enabling code reuse in my application. A partial view is again just if you you can see a sample partial view that doesn't look very different from a regular view. Now does it in eight. From a code perspective, a part of you is just like a regular few. But to use it as part of an interview, it's also typed in this case in pie, and we use that model to access different property values to display. One thing is different door. It's a convention in Espionage Corps Embassy to give all partial views and name that starts with an underscore. This will allow us to distinguish between a regular view and a partial view. We now want to use our partial view. Begin again. Use a dag helper. A tank helper will execute, coat and render HTML. You already sorted in the previous module here to Tang Helper will expect the name property as the bare minimum. The name points do the partial view, typically starting with an underscore notice. There's no extension, so no CIA takes the mound being used here. This results in the parts of you being searched for in the folder off the current controller and also in the shared folder. We should also pass in some extra data for the partial view to visualize and that we do here using the model property I passed for each run off the forage loop, the current by instance, to the partial view so it can use it as its model. Why, it's possible to good partial views directly in one of the controller folders. Typically, they will be shed and is therefore also common to place partial views in the shed folder. When Reason our encounters, the partial tank helping it will by default Search in that Shan't folder says the idea of a partial view is indeed sharing a few between other views. The shared folder seems to be a good place.

Demo: Working with Partial Views
[Autogenerated] in the first demo off this model, I'm going to create a partial view, and then we'll update by Overview Page to use the partial view. This goat here is actually told that I'm going to be able to reuse quiet a few times throughout my application, So it's definitely a good candidate to move this into a partial view. Sure, let's do that. As mentioned in the slides, it made sense to put Barschel views under the shared folder. The Chateau Old is a known folder for a spin in court NBC, and if you ask it to show a partial view, it will first look in the controller folder and then always in this shared folder. So if you have partial views that are going to be used across multiple controls, it makes sense to put him here. So that's exactly what I'm going to do. So let's go here and add a new bunch of you now you won't find here a partial view template because a part of you is in fact, just a race of you. So go to Ace Political Web and then select just a blame race of you as mentioned partial views typically on prefixed with an underscore toe indicate that they are really part of you's. So let's go on the part of you pie can't in here. I'm not going to use the coat that we already have in the list of you. Let's go here, Get out of this code here and basically simply based it in here. There you do not forget that we also need to give this one a model. The partial view. We'll get in a pie because we are going to render it for each by here in the list. So the mobile is effectively going to be a buying it. Never. Your studio is complaining that it doesn't know part here, but that's correct. That was actually this by institute for each loop 20. Replace this with model. Why didn't abide? It will be passed to this partial view. I need to do that for every instance here, after your studio seems happy again, then I'm happy too. All right, let's not go back to our list and in here and now going to say that this one cannot use our punch of you do visualize each individual pie. For that, I'm going to use the partial tank helper. And in there I'm going to point it to the pine, caught using the name attributes. The model that is going to be passed to my partial view is effectively the bike that is passed to us in the footage loop. If you now run this well, you won't be really amazed because we're going to see exactly the same thing. But let's very find out. Everything is working and effectively. The vilest is still showing correctly. The HTML is probably exactly the same, but it is not using the parts of you in the next demo, you're going to see that we're actually benefit inquired Lord, by putting this goat in a part of you that we think can also reuse on the homepage. Do that next

Demo: Creating the Home Page
[Autogenerated] so far, we don't have a whole page in the application just yet, So let's not create it and re use are partial view on this home page and is now at the missing. Hope it and re use are partial view here. So how are we going to create a home? It Let's first go back to the start up and notice that we had in the route that we already had to find here specified that if we don't specify any controller and any action segment in the route pattern while, then it's going to default to the home controller and the index action. So that means that if you create a home controller and index action, we actually can navigate that as a default. So let's do that here. So gonna go here to my controls folder and add and your controller and in order for this one to be the default now that's called it home controller. It already comes with a free in this action. We're going to change that a little bit, so I'm going to based in code for my home controller in home controller. I'm going to use again deep I repositories Why? Because I also want to show a number of five on the home page. So again, that is being passed to me via constructor injection. I've updated the next action a little bit, so it is now going to use also a few mull. It is called the home human. Or we don't have to get out great it in just a second and is going to contain a list off pies off the week that I get again Fire Depository that I'm them passing. To my view. You don't have that home remodel yet, so that's great that next I'm going to go to my view models holder and in their create a new clothes that's going to be no view model that will contain just a very simple, inimitable off the ice cold eyes of the week. My home a troller. Don't forget to bring in that home view model. Now we're doing a degree. It next off course, the in next action. So let's do that now. So go to views and in there, or create a new folder called Home and, of course, in their create. Then in your view, and it will be our index. You What am I going to have in these if you Well, if you remember from the beginning from the running application I had at the top scrolling images, that's like a carousel view. And then the pi ce off the week. So first I'm going to create those scrolling images and just for the fun of it, I'm goingto also wrap these in a partial view. So I'm going to go back to my shared folder and in their trade cannot a partial view called Carousel. So add a new item here and add another race of you and because it's going to be a part of you that's called it Underscore Carousel in there, I'm going to paste in some code again. It's a snippet you can download that contains scrolling images. It is just a bootstrap. Good. I'm not gonna really explain this goat in here because it's not really relevant for discourse. So you see some layout got some boots step coat that contains a number of deaths that is going to scroll through the images that we earlier pasted inside of deductive the fruit flash images folder. All right, so does not go back to our next and in there at his first use our partial view on the script carousel because that's what I'm gonna have at the top of the screen at home. Controller was also passing in a home for your model. I'm going to time this into the home here more. Yeah, inside of the home page. I also want to show the pies of the week that I passed. Find a home for model somebody to bring in another very simple for each loop. That's going to look over the price of the week and use or reuse I should take off pie cart. That's the part of you that you created in the previous model. With these things in place, we actually should not be able to see our home page, and you're reusing the pike are on there. Let's try that are at We have a home page Wait scrolling images Wow, fantastic! Down here at the bottom, we are reusing our promotion of you Pichot. I can click a martyr pies here animal also go to the details off that selected pine. One more thing to do, adding the home facing here in the navigation bar Let's go back to the layout, and that's bringing the homeland here as well to replace the sweet home and make sure that this is the controller and then the index action. With this in place, we now have a working whole bake in the application.

Creating the Shopping Cart
[Autogenerated] the Web shop without the ability to shop is actually pretty useless. I guess that's why Bethany has asked us to include the ability for people to have a shopping cart when browsing the different pass in her store. That's not see how we can create one in a spin it court every C three Before we look at the shopping cart itself, let me explain you how I'm going to implement it, since we don't have user accounts in the application just yet. We can't really associate use with a shopping cart, but what we can do is use something called a session. Sessions are a feature off a spin in its core, which allow us to store data on the server while the user is browsing through the application. It's entirely managed by a spin it core, and we can basically associate a session with the user when he or she comes due on a site that session. We will then used to store a unique I D for the shopping count. Internally, sessions rely on a cookie that contains a session I D that will be sent with each request to the server, and that's how a speeding at Gordon knows who made the request, as we have not seen a few times already, is the goal of the A spinning at core team to give the footprint off an application as small as possible? I mean, does need to add service is we need support for sessions isn't included by default, so we need to bring this into the application to bring in support for sessions we need to call. Service is not at session also a middle where component is required. We can add support for sessions by calling use session in decon figure meant it. This will do if he was the session object from our controls. However, as you'll see in the demo, I will need to access the session from a service class. So a Blaine non controller class the session object can be accessed through something called the http context, which we also need to bring into our application and that we can to using Service is built and Katie to be context access, sir, as you can see her in to snip it in green

Demo: Creating the Shopping Cart
[Autogenerated] as mentioned. We're going to add a shopping cart in the ____ it. We need to follow quiet a few steps. I start with the creation of the model classes, and then I'll go ahead and show you the shopping cart, which, as manchild will rely on sessions. We'll have to make some migrations for the database and look at the shopping cart view. And I also need to make some changes to be able to add items to the cart related to navigation. Let's get started in a shopping cart that we are going to create. I'm going to work partly with sessions and partly with the database I'm going to be storing in my database shopping cart items. Those contain the amount off a certain pie that user has placed in his shopping cart. So if I need to place something in the database, we're going to have to create a model first. So let me go and create a new middle class, and it's going to be the shopping cart item close in there, just like you done before. I'm going to bring in a couple of properties. The shopping cart item I D. Is just a counter. The pie is basically the pine shopping can't either. Points do the pie in this shopping cart item, and the amount is like I've said a mound of pies that we've added for that certain pipe. And then we also have this shopping cart ivy, which will play a very important role. That is a strength notice that I'm going to only work with shopping count items and not really with shopping taunts. Since we work with the shopping cart items in the database, we need to also go to the MTV context and at a new TV set for these shopping cart items in order for them to be managed by my Abitibi context. So let's bring in another DVD set for the shopping cart items, and it's called that shopping cart items that's made sure that we don't forget to bring our database in sync. So let's go to the package manager console and add any of migration I'm gonna and a new migration using at migration, passing in the name of the migration. Let's call it a shopping cart and it it is. Your studio will first performed a built and then create the migration. Kloss If I know doing up the database, the database will be updated. I'm now going to create the class for the shopping cart and pasted and take you through it because it's quiet, a lot of coat, so I'll come back with a shopping cart class already at it. Here is a shopping part that I've had pasted in using the snippet that you can find with downloads off the course. That's first fix that issues go here on the get required service. Bring in support for dependency injection and then down here, bring in support for Max Entity, Family Court. Let me take you through the cut. The shopping cart class will work with the empty be context. So we are passing it here. Fire. Constructive injection. The get Cartman, That is a very important one. And notice that it now gets an eye service provider called service is that is basically going to give us access in this method to the service's collection. Basically, the collection of service is managed in the dependency injection container. Before I expect you to code, let me give you some back on how I'm going to work with my shopping cart when you use it comes to my site. I'm going to check if your she already has a active shopping count, a shopping cart and going to represent in memory using a good a string days and that string I'm going to be storing in the session. So in other words, when the user comes to my site, I'm going to check if there is already an active session containing a card I d. If not, I create a new one, Then I'm going to create an instance of a shopping cart passing in that got I D. That's exactly what I'm doing in this culture. Let me show you. I'm going to have to bring in support for sessions sessions like me to store information on the service side between the requests and to an underlying mechanism off cookies, a spin it can. This way. Remember, basically keep state information on the server about a certain active session and the brilliant support for sessions. I actually need something called the I get chippy context access. Sir, we have access to the sessions directly in a controller, but we do not in a regular class, and that is why I'm going to use the service is collection here and ask it for a required service called the I 80. Big Context Access. Sir, we need to bring in support for that in the start of class. Will do. That's very soon. 30 i hdb context access. Er I get access to the HDP context that gives me access to all information about the request, and that way I can also get access to the session. They also asked the sources collection for the empty be context in the next line here and then check this session to see if it already has a string with the I D card ready. If not, I'll trade a new good and that will then be the card I d. It has set in the session. Finally, I create a new shopping cart passing in that empty be context with a shopping cart, I D said as the card I d. I also have a couple of metres down here. Then allow me to add items to my shopping cart, removed her from the shopping card, get the shopping god items and clear the cart. Finally, we have to get tropical total method down here as well in the attic card mattered. I expect a pie and then amount in here. I'm going to use the MGB context and used the shopping cart items to be set. I'm going to check if that pie I d can be found for that certain shopping cart It a drop Picard item is no meaning that I was not in a shopping cart yet. I create a new shopping cart idol and I said the buy as the past empire and, of course, the amount. That's one. I don't have a drop in CART item to the list currently managed by ABP Context in its TV set. You did already found it. Well, then I simply increased the amount. And then I call have to be context safe changes that will allow me to add this shopping cart item to the data, please. The debate context will not perform. The actual sequel in direction they removed from card is pretty similar. It will basically remove that given by from the shopping card. If found, get shopping cart items will look if the shopping cart items were already previously retrieved. In this current shopping cart, instance, I have the shopping cart items list different E at the top of the shopping cart. If it's no well that I'm actually going to go to my Abdi Bey context and retrieve the shopping count items where the shopping cart I d is the given shopping cart i D. That's currently associate it with the session of the user. The clear card simply removes all the shopping cart items that are associated with the shopping cart. Andy, they get shopping cart Total Minted simply uses a link gray to calculate the sum for all the items in my shopping cart and returns that total. The shopping cart class can be a bit complicated, but it really is a very simple approach to using a shopping cart in the application. Now. The next thing is, of course, using this wiring in the Let's say, Let's go to the start up costs in the start of class. In the Configure Service's method, I'm going to add a couple of things. First, I'm going to use hand scoped on surfaces again, and now I've passed in a shopping cart and I am not going to pass in a lambda, which is going to invoke for the user to get complimented. Only shopping cart, close eye passing. The ice service provider that is the service's collection that I need access to in my get card meant it. Why is this line very important? Well, when the user now comes to my site, I'm going to create a scoped shopping card using the get carte method. In other words, to get can't met it is going to be invoked when the user sends a request that gives me the ability to check if the cart Adi is already in the session. If not, I passage into the session and I returned the shopping called itself down here. This way. I'm sure that unused comes to decide a shopping cart will be associated with that request, as it did spoked. It means that all in directions with that same shopping card, where did that same request will use that same shopping cart next? I also need to bring in support for the HDB context access, sir. Remember, in the shopping cart, we asked for an I. D. G B contact access er to give us access to T H E B context that would then give us access to the session. I need to bring that in manually here as well. Finally, I also need to bring in support for sessions that you also need to add to deserves his collection. You can already guessed the name it's going to be at session. Bringing support for sessions not only requires us to add session to the service collection, but you also need to bring in middle where, in order to support this, I'm going to bring in support for sessions by calling here the AM not use obsession Middle where that will bring in the correct Miller. Make sure that you call the use session before use rounding. That's very important. The order of the components in the middle, where Piper definitely is important. I would have a shopping cart at this point, but off course we don't see anything just yet. So let us now create a shopping cart controller and the corresponding views so under control is that's creating your controller. Go to Web here, Sykes, controller, and that's going in your shopping cart controller. Any shopping cart controller and it used the fire depository and the shopping cart. That's the one that will be created on a scope life also on ahead quest level here by calling the shopping coddled Get card met that will then be passed into constructive injection into my shopping cart controller. Do not forget to bring in the correct using statements here. I mean, are also paste in the actions own this shopping cart controller. There are a few new concepts that are going to be introduced here. Let me show you the index is simply going to return the view for the shopping count in there. I'm going to host the past the shopping cart for it shopping cart items that I'm going to pass through a view model that we still need to create. And in that I also need a shopping cart total, which was also available on the shopping card, Really get dropping card. Total method have also added to other methods and to shopping cart and remove from shopping card, which are going to redirect the user to an other action on the shopping cart. Notice we are returning here, a redirect to action in the after shopping count, I pass in the idea of the I don't want to add do my shopping cart I get that by to the pirate depository at Impasse to the shopping cart that selected by to the add to cart method, then, on redirect the user to index that is going to redirect the user to the inn. Next action on the shopping cart controller to remove from shopping cart is very similar. It's also going to re directors to the next action, and it's not really in the shopping cart _______. I'm going to go here and add a new cost to my few models. Folder all that shopping cart few model and bring into properties the shopping cart. Few model these access dude, actual shopping can't and a shopping cart total. That's update here. I bring in an amusing statement here, so that's a shopping cart controller now is correct as well. The shopping cart has an in next few results, so we still need to create that in next to you. So under views, that's create another folder and you already know to drill. That's going to be called shopping cart, and there we still need to great an interview, and that's going to be called in this. Go here to Webb and add another ways of you called Index. Let me paste in the code for this index. You. It's of course, going to be typed in shopping cart. Few model and it's actually hard a symbol. It's going to create a table where I'm going to do in the body of the table, loop over the shopping cart, items in the shopping cart, part of the model for each of these, and go to show the amount and nine of the by price and the lime price. I also added another row that contains the order total. We tell him, Please, we have a working shopping card that is not the one more thing and the support to add items to that shopping cart. That's of course, a very essential function over shopping count. Since we have created a departure view by card, I can't do that now in one place. I'm going to bring in the link that through the use off bootstrap, I make into a bottom that is going to on the shopping cart. Controller called the ad to shopping cart, and the route perimeter is by idee. If we go back to the shopping cart controller, we are indeed going to call the antique shopping cart action that requires a pie. I d. That is the route better meter here because I put it on the partial view pi card. This is now up to date throughout my entire application or fuse that you dispatch of you have disability. Now, I was going to give the ability on the details page. I was pretty much the same coat to allowed user from here. Also, to add an item, do the shopping count. We added a lot of coat. I hope that everything works. Let's take a look. So now here on the home page, right, we see the add to cart button. I click this I'm going to navigate due to shopping cart controllers in next you we go to the vice page, we can click on the pie, go to the details and at this by your shopping cart as well. And you also see that the total gets calculated nicely. We now have a working shopping cart. How great is that

Adding View Components
[Autogenerated] Now that we have the shopping cart scared in the application, I'm going to use a view component to show on each page how many items we have in the basket off course. Before we can do that, we need to understand what few components are. Let's take a look we have in the beginning of this model. Looked at partial views. Ocean views are very helpful. Feature off a speed in its core NBC three. But they have a limitation. Take another look at the _____ of you code here on the slide. As you can see, it's fully working on data that's being passed to it from the calling view. In our case, that was, for example, the overview off the pi CE. Even the polish of you needs order data. We could, for example, on the overview list Great a view model that also then contains the data needed inside of the partial view. Aldo Networks. It's not really a perfect way off working now, a speeding at court NBC comes with a new feature that will help solving this problem, namely, view components. A view component is similar to a partial view in many ways. On just like a bunch of you. If you're component is only going to be used for this plane. Partial content you won't be using a few component for the entire few. A view component persists out of a class. And if you basically like controller and it's you if you'd like a partial view. But the data will not be passed from the view component coat in the C sharp coat that sits behind the view components or in the logic, we can therefore write code that gets through quiet data form I haven't needed. It's not limited to the data that's being used in the calling view. It also supports dependency. Injection for this and a view component is also not a standalone component. It's always going to be invoked from a parent you, but it can execute code to do whatever it meets, for example, loading in different data. So where is definitely going to be using your components? Then, as they can work with data and dependency injection, they make sense for stand alone components where logic sits behind, So a look impanel good. Be a good use case if you want to create a dynamic navigation menu options depend on whether the user is logged in or not. We could also use a view component. A shopping cart when we display the items in the basket would also make sense. Let's see how it can create one of the few components. Then there are different ways to create a few components. I show you one here that I believe is the cleanest way to do so. You can see a view component close, which derives from the base view component. Close the view component clubs must be a public know abstract and no nest. That class, just like you controlling really in the view component coat began. Then add our functionality. We want to execute inside off the invoke method. I know that this is not an override, and I'm doing here, and we use the view component. A Speedo Net core. NBC will search for a method called Invoke and call that force next to the class. A view component will also need a view that is the visual part of too few component. It's not strictly necessary. By the way to have a few, your view component may simply return a string, which then gets inserted. However, in most cases you will typically also have a view. The view parts off the view components are typically placed in a folder called Components, which is a sub folder off the shared folder. Each few component that recreates will get a sip fold in this directory. Here in the screen short, you can see that we have a folder called Shopping Carts Emery, which lives inside off the Components folder. The letter is than a sub folder off the Shameful Well, then again, find a CSS HTML file, which then contains the view components viewpoint. Typically, this file is called default, but see his extreme L. Now I want to invoke the view component from a view, or perhaps the general layout. Well, they have to use the new razor at await component will invoke or invoke a sink expression. You can see this. I'm passing in the name off the view component. I want to invoke

Demo: Adding View Components
[Autogenerated] that does not return to our demo. We're going to actually look ATT to view components here. One for navigation purposes and a 2nd 1 for the shopping cart. In the previous demo, we successfully created a shopping cart, but wouldn't it be nice do on each page see how many items we currently have in a shopping cart? We want to reuse that functionality. We want to put that on each page, so a partial view comes to mind. But the thing is, checking how many items I have in the shopping cart really requires database access. So it's not a good candidate to use a partial view for what is a better tended in this case is a view component. That's exactly what we're going to do here. We are going to create a shopping cart summary view component. Now I'm going to create a folder to place all my few components in. I'm gonna go to my project and had another folder here, and I'm gonna call that full of components. This is not really necessary to give his name. You can even put these components inside of an external library. I'm gonna adhere a plane class that is going to contain the core functionality off my shopping card Summary few components. I'm gonna call this show Pecan summary. The maid is into a view component. I'm going to let this class inherit from view component bringing using statement. And there we go. As mentioned, we are going to need access to more than just a view data. So in this case, the shopping cart summary will actually work based on the shopping cart that we have created in the previous demo. So I'm going to bring that in. That's my shopping cart. And because of the fact that the view component is like a mini controller, we can use constructed injection here, so we can definitely use the following destructor. So we get in an insult a shopping cart through the Bennis injection. I remember That's the same one that was added here to De and Scott made it in the car Figure service is Onda functionality off the shopping cart is going to be wrapped inside of a method called invoke or if it does anything a synchronously invoked a sink. Now that is not an overnight here. We simply have to go our mattered invoke or invoke casing, and it will be invoked as the functionality for off your component. In the invoke method, I'm going to go to the shopping cart and get its items. Then I create a new shopping carts for your model that we already created earlier. That's a view model, and I'm gonna pass in the shopping cart and a shopping contra total, then, very similarly toward the controller. Action does not going to return of you passing in the shopping cart of your model. Notice that, however, the return that that is, I've you component result and not actual result. This is a very specific type that is going to be returned by a view component, but it is going to return a few, so we still need to create that few few components are going to search for their views in a very specific location. Go to the shared folder under views and in there really full of Colt components in their create, Just like with the controller, a folded that has the name off the view component in our Kays shopping cart summary and in your folder here, Shopping Con Century. In there, you need to create your view as default, not CSS HTML. That's going to contain the view coat for the few component. It's again a plane race of you. Remember, it needs to be named default built CSX chemo. This one is going to get in a shopping cart. Fumo. And now what do I want to do in my shopping cart? Summary view component. I want to show the amount of items that abuser currently has in a shopping cart. I'm gonna use the following code for that. I'm going to check if the user has items in the shopping cart. If not, I simply don't show anything. But if there are items in there, well, I'm then going to use a small shopping card. Gl If Brighton and I'm also going to show the amount of ideas in the shopping cart, Reed isn't Please. We can now go to the lay out clothes. He also lives in the shareholder and in here I'm now going to add my shopping cart Summary view component evoking a shopping hard few component is done to the following Kurt, I need to call the weight and then say component. Don't invoke a sing. I need to pass in the name off my view component, and that was shopping card summary. Put this inside of this u l because a nicely wrapped the HTML here in an hour, I that can become a child off this you will. So it is in place. Their shopping carts summary should be working, and shirt shows the amount of items we currently half. Let's take a look. You don't see anything at this point. Should be panicking. Well, no, there are no items in a shopping cart left. So let me go and add on our item to my shopping heart and, uh, the shopping cart. Summary east showing one. We have an item in a shopping cart. Let's add another one and see it update at the card. And now it nicely shows two items in there. We have a working, shopping hard summary component. I refused another view component in the application and you can see it up here when I click here on buys notice that this now will expand their That shows me this expanding menu. I cannot click on, for example, fruit pies and then only see the fruit pies off course the same goes for cheesecakes. But then, when I click here on your all pies, I will see all the vice currently in Battery Special. How did I do that? Well, I actually used another view component. Let me show you this time the coat. You can find another few component in the finished solution called category menu, which also enhance our view component. It uses the category depository passed into constructor injection, and in the involvement it I simply get a list off all categories from the database to the category repositories. Again, is this functionality we can't do in a part of you? Because we need to go to the database to the depository to get all the categories in the corresponding view I'm getting in on I inimitable off categories either loop over all that, get degrees and create a link using tank helpless that will go to the pie controller and list action. But this time and I also passing around category called the category name. I also showed it at a great game, and I had a Nordling here to view all the points where __ leave that category blank. I've made a change in deep. I controller the original honest action. It's not mean if you moved and now use this list action that that that except a category it could be empty. And then I show all device else I get the price by the category is equal to the past in category name. Finally, I then have on my layout ad also this category menu and that resulted in the drop down menu that you saw in the running them. This is not a place where we could use a view component.

Creating a Custom Tag Helper
[Autogenerated] The long stopping that we will be discussing in this model is how we can create custom tank helpers. We've already seen Tank Harper's, but the good news is that we can also create Gustin Tech helpers ourselves and use them to wrap functionality. Let us see how we can do that as a small reminder. What was the core functionality of tank helpers again? Oh, tanker was contained internally C sharp coat, and that C sharp coat will generate HD mo. He plays a tank hopper in the razor coat. And does they help in the rendering off the page whenever we think. Hey, this is something I can wrap in a small reusable component across multiple pages. It might make sense to create Attack Helper from it. Indeed, attack helpers are an important extension point in a speeding at court. NBC applications creating a tank helper is done entirely in see shop. Tank helpers are just glasses, and we can place him in our project whenever we want. In order to be Gump, that dank helper a glass needs to inherit from the base tank help Kloss. The name of the attack helper, is composed out off the name off the element it works home, followed by Thank Helper here. I'm going to create my own Dag Helper called email Bank Helper. The goat that will render the result in HTML will live in the process meant it. Notice that this time around, it's actually an over right. We'll see how this works in the demo. I want the tank. How, but created into razor coat, I'm now able to create an album called E Mail. This will then invoke the process method all the tank helper and inject the resulting HTML in the very location where this one is used. Interview. Although we can place aren't tank, help us wherever we want, it's a good idea to place them all in the same location. The reason is that we have to register tank helpers before we can actually use the main coat. We have earlier already seen how we can enable the use off the built in tank helpless in our application. My addict and Trudy few imports found when we create our own deck, help us. We need to follow the same procedure. Really. You can see the amended of you import from there have not brought in the name space. I have placed my own tack happiest in By adding Diz line, I can now use it throughout my application.

Demo: Creating the Email Tag Helper
[Autogenerated] that does not return once again to the demo application. I'm going to quickly create a contact page, and then we'll create the email camper. Finally, will them using the tank help on that for every page, so that visitors can contact battery via email? Let's take a look. We've been using quiet, If you tank, help us. But it's also possible to create our own. In this demo, we're going to create the email tank up a custom Tak Humber that accept an email address, some text to show and that will render behind the seas a high pulling that will automatically send an email. Let me show you how you can do that. I've already created very quickly the contact controller and the corresponding contact you. It currently is empty. We're going to use our tank helper to show some cold in here. I'm going to put my tag helpers in a full of cold, dank helpers. I think that's a good name again. You can put your thank harvest in an external library and reuse them across multiple projects. Any attack how this folder I'm simply going to create a new class, which I'm gonna call email tank helper. The default behavior is that when you create a class called email tank helper the tank up, it will be usable as email. So depart that sits before the Suffolk's tank helper a bag helper needs to inherit from the base. Thank help it close bringing, using statement and every year. So my thank helper is going to accept two properties the content and address email interest and say that you're going to send an email to I add those ___ do simple Blaine's during properties and the executed attack, hoping you're going to override this time. Aim at it. The override that we're going to do is called process, and in the case that you have basing dress code, process a sink, we see two perimeters that are being passed in here. The context and the output. In this case, we're only going to be using the out, but we're going to build up to the output the html that you want to generate where tank help is going to be used. I want to create an email link that, Sir, that's going to be just a plain link to the output tag name that I'm going to be using is simply going to be an anchor tag, a link also ahead tag that's going to be created. I'm giving two handsome attributes. So duty attributes collection. I'm going to set an attribute saying that the eight draft is going to be created. Should be male to planets to found you off the address property. Next between the opening close tag, I want to create some content. So on the output of content, I call the set continent. And I didn't specify here that the Clinton property that's this one here should be used. Dannon, please. Our tank helper is red, not in order for us to use it. You need to make our application aware of it. So our views need to know about it. That's something we've already done. Yes, indeed. We need to go to the view imports files and in their little call on other at that camper. In this case, however, we now need to bring in our own name space battle. This partial Brookbank harbors in the assembly. Matheny's partial your place do a small build so that twitter stood. You definitely find your new tack Help. Okay, the build is done. Let's now go back to our contact you and in here we should not be able to use our tank copper. I'm going to start timing email and notice what happens when I've written the word email. All of the individual studios intelligence notice that this is now a known tank helper. You even get intelligence on the properties. The address is one that's going to be jail adds no bottle. Be as my email address and a continent that's a text I want to show is going to be click here. Let's put some water content in here. What is in place that does not see if the attack helper correctly generates a male to link after he did a little bit. I've already added this contact link in the navigation menu. I'm sure you can do that yourself now, so let's go to the contact page. And here, when I see are generated Link that will send an e mail, do my email address. So when you have a visa functionality that needs a generate HTML across multiple pages, definitely think off attack helpers. They can really be a time saver

Summary
[Autogenerated] now we don't. We have reached the end of this model as always. Let's summarize what you have learned in this mantra. You have started this module by creating a partial view. A bunch of you is basically a piece off you coat that you can reuse across view Coat does, preventing us from having duplicate coat in their application. I have spent quite some time creating the shopping cart in this module as well. The shopping cart implementation that we have used is relying on sessions and a session I D. That was stored on the server. Next, we have created view components. A view component can be seen as a type of partial view. However, as I explained in a view component, we are not limited to just a model that's being passed by the surrounding view. It can do a lot more than partial views. Finally, I have seen how we can create our own tank helpers. These can typically be used if we have a piece of functionality that we can reuse across the application. I hope you now feel a lot smarter again in the next module. We're going to explore how it can work with forms and we'll come across more tank helpers. See you there

Creating an Order Form
Module Introduction
[Autogenerated] Hi there. Good to see you back here for another marshal off. Building where? Applications with a spirit core. NBC three here on polluter site. Our scientists looking right now in the last module. We have improved the views of our application quite a lot. I'm pretty happy already. And if you have been following along how we have to do in this module, they're going to be focusing on something that is pretty crucial in Topshop. And that is the order form. Let us start by taking a look at overview of this module and what you will be learning. The order form is quite logically a form. We'll start the model by actually building the form and we'll see again that tag help us will be the star of the show. Indeed. Back. Help us keep popping up pretty much everywhere in a spin and ______ every sea help you understand that they are a very important feature for the platform. Now. Next, we need to be able to capture the data entered in the form and they're through. NBC has a great solution in store, namely mortal mind. Finally, we'll need toe also adds validation to the form and at validation was on the mold so that we don't end up with invalidate ER in the database.

Using Tag Helpers to Create the Form
[Autogenerated] So let's kick off the Marshall by creating the form itself and as mentioned building forms will it can go hand in hand. Wait. Tank helpers is big enough. Korean receipt comes with a number of built in Tak helpers that enable us to work with forms, and we'll be using quite a few in the upcoming Demmer. When we create the form, the food tank helper will allow us to create forms. I think you had that one figured out yourself. The input tank Help. It will, of course, be used to create the input tank we're also getting from dansby dot net a label tank. Help with that text area there. Calbert. Any select back helper. There's also a number off tank Helps, which are related to validation. Informs We'll explore those later in the module, where we explore how the ad for the nation to the form. Let's take a look at the most basic or should I say, boring? Thank Helper, the label back helper. Its use is generating a label for a property on our model object to indicate which property it should be working with. We used the S B for attributes, which will get as value the name off the property we want to display when we have this good in a race of you, This will result in the following H. De mon being generated The value of the generated four attributes matches the name off the property. We gave it the content of the label this place, the name off the property. We can also aunt attributes to the properties of our model to change the despite value so that to found you that will be displayed is more readable. As you can see here, if you would be any other attributes just style attributes a clause. For example, this will be editor degenerated HTML, as you can see here in Denison's, also works when working with tak. Help us off course only when we are creating a strongly typed few meaning that vicious two year knows what time you're binding too. Dang Harper's don't only appear as a regular element. Some tank helpers are attributes that we use on order. Tank help is and we have seen quite a few of these already. When we looked at navigation. These are some of the tank help us we can use on the form Check. The SP controller can be used on a form tak help to indicate which controller should be targeted by the post action of a fool. Similarly, the s B action Tak help! It allows us to specify the action under control it we want to target. We have already seen that we can create a route Extra perimeters are required to cover. For this you have the S B dash wrote and then the asterisk where the asterisk can be replaced with the name of the pedometer. We want to specify a value for there's also DSP Roach di Tella be which allows is to get rich named out we want to use and we have the S B and I forgery that copper which allows us to count. Of course, I'd request forgery attacks on inside by generating a hidden field request. Gratification Duggan, You can see an example of the form tank. Help it read some extra tank helpless in action. The S B action has been specified. It will trigger the checkout action in this case on the current controller. Since no other controller has been specified. When we perform a post submit, let's say with this fool

Demo: Creating an Order Form
[Autogenerated] now, without any further delay. Let's return back to the ____ it. We're going to add support for creating orders in the application. I'll quickly show you the order control and they're related to the main classes. Then we will create the order form using several tank helpers. Again, we'll also make sure that the navigation do Our order form has been correctly. Why, if the at this point it's possible that at items in Bethany Spanish up do the shopping cart. But it's not really possible to place the order just yet and a shop without the ability to order something. It's pretty incomplete. In my opinion. We'll start building the order functionality with this. ____ it. I've taken the Liberty toe already. Prepare a couple of things that we have already done a few times before in this course. So I have already added, Let's say, the order back and functionality. So in the model I have created this close order and that will be used to capture the details over order placed by the user. It has an I D. It has a first name, last name, address line and so on, and it also contains the list off order details, and it's a second clause of headed here. So the order detail contains the order Andy to which this order detail is linked. It also contains again the bi i D and the amount off that particular pie as well as the price. So basically, when blazing order each shopping cart item rule result in an order detail being created linked to an order that are going to work with. These two are going to be saved to the database. So I've operated Debbie Context so that it also contains a TV set for orders and order details. I have to do the at migration statement already created a database migration and to an empty database. I've executed this migration into my real date race, so that is already done. I've also created an I order repositories already. That's the interface that contains the functionality off the order depository, and it just allows me to create an order and it, except on, or have implement that already in this order repositories clubs that off course influence the I order repositories and uses the Abitibi context and a shopping cart. The create order implantation is really the code that is going to use the repositories to create both of the order and its order details. So here you see coat that is going to use e f core to create really that entities in my database. First, we add the order with all the details to the activity context. Got orders. At that point, that order is being tracked by e, of course, but it's not really being safe yet. Next, I'm going to look through the shopping count items. That's why I need a shopping cart. And for each shopping cart item, I'm going to create a new order detail. Then I add to the OTB contexts order details my order detail. With each run off this loop, a new order detail is added to the empty become text about order details. Finally, we call safe changes anything go to save boot the order and the order details into my database. Finally in. The last thing I've done is also in my startup off course, registered the eye or a repository with its implementation order repositories. Salon is now start building the actual order functionality and, as always, will start with the creation off any of control. So in my controllers folder are at a new controller. So that's over here, creating the order controller and in the order controller. We are going to work with the depository and a shopping cart again. So I use my order repository and my shopping cart and true dependency injection to construct the injection. I should say I get an instance off both of these. I'm going to rename this action to the checkout action. The Jack out action is we're going to be the action that will be invoked when we are creating the order. So we'll need a check out for you in just a minute. The checkout action is going to return full. Now. Just a plain view will focus first on the creation off the view. So let's go to de views, holder and create and you sub folder for order. And in here, Well, no need to create on an index view, but the checkout few. I am going to bind my check out of you to an order. Although I haven't typed my view in order, I'm still going to make it into a strong attempt to in order. The reason is that where we later post the form that we are going to create on order Instance will be created for me through model binding and see that very soon. So in this check out to you, we are going to allow the user to enter all the details about the order. So when the user needs to send data here, she is going to use a four and any has been at the core we now can actually, that's a a greater form into using tank helpers. When we're going to specify on the form for now is that s b action. We are going to specify that when the user is going to post the form, it is going to boast in back do the checkout action method will be posed. If I don't specify the controller like I'm doing here, we are basically going to post back to the same controller and that's OK. That's the order control. In our case, I'm going to add also some CSS to make sure that the form renders correctly inside the form as first at a small header that gives some information did user for each of the properties on order. We are going to create the ability to enter details. I've just added a diff that contains a label and another different in their most importantly, an import notice that we have. The label, which has the ace before last name, said this means that this label well, look at the last name on the order clause and render its property value in this case that is lost name. Then the input is actually going to be bound to last name as well on the or so that is going to be used to capture the value entered in this input and save that into the orders last in property. So we have again used tank helpers now to create a form, and if you look at his HTML, it looks pretty clean. Even if you don't know a spin at core, it's very easy to understand what the resulting HTML will look like. Tank, help us make this very simple. I'm going to paste in the entire form that we need. The rest of the form for Nam is very similar on the same for the first name, Full Andras Line one and two zip Code City, state country phone number and email. Finally, I also need the ability to post my phone. I'm going to add a input down here at the bottom of the form is going to be an input off type submit, which ambush Gypsies as classes under notice that I don't specify here an action because the action has been specified on the form at the top here I had to actually navigate to this form. I'm going to go back to my shopping cart for you and below the shopping carts table that lists all the atoms in my shopping cart. I'm going to add an anchor tank, a link tank that is going to redirect the user to the checkout action on my order controller, as they look now at How does form is not being rendered in the application. There is a running application that's add something to the court, and he's seen her then Burton that you've just added to the shopping cart and we click on check out now actually see are created for it looks a bit rough on the edges, Really, As you can see, it says here, last name in one word. First name in one word answer. One is a couple of things that we still need to fix, but we already have a form. If it's simply click on the button here, nothing will really happen because the form is just posting back to that same action method that is not correct either. So we need to fix that in the next demos.

Understanding Model Binding
[Autogenerated] I am pretty happy with the order form that we have created so far. Now, while it looks good, we still need to be able to capture the data entered. Find the users later will be submitted. But how are we going to get hold over the data in our SP genetic or application? Let's take a look at something called model binding, which will be a great help here. Data will be submitted to the server when the user has completed the order for man heads the submit button. But do we really need to go low level and find all the values we need in our coat in the list of submitted field values? Now we can do that. It will become a tedious and error prone task very quickly. Luckily for us, a speeding at court NBC will match the data coming from the http request with the arguments that are exterminated needs. This process is called model bun. Using model binding. The objects which are required as input parameters for action methods, are created based on the data retrieved from the 80 to be request, the data that will be searched for are required values will be searched by a speeding that core in several sources, including credit. Better meters posted values in the body of the request and we're out families. And middle banning is not limited to just searching for simple times like strings or a dangerous. If we require a complex type in the action bottle Mining will try to reconstruct instance off that type with all the values it finds as well. So let me explain in a bit more detail the model binding process. Imagine that we have an action method that requires an i d. Off type end s Pammy. Every scene needs value to be there in order to be able to call dismantled model. Banning will try to find the value for these anti pyramid when we send a request to pie detail. One. We actually want that the one over here will go into the idea Field model Binding will do this for us, and for this purpose, it will use something called model blindness. Moral blindness are components which will help providing devalues from a certain location in the request. For example, there's a model binding that will search in the form data off the request I don't know. Model Binder will surge that route for valuables, and 1/3 1 will search in the query string. The list off model blindness will actually be invoked in this order, and as soon as a match is found, the process will stop and pass the value to our action method. Imagine that we have a route. We have a segment I d defined. In this case, the value 40 i d pedometer will come from the route for reliable model bind. Now, as mentioned, model binding not only works for simple times, but it will also work for complex type, such as an entire object. In this case, the model binding engine will look at all the Target Objects properties, and we'll search this instead, again using the same model minus. Imagine that they are creating an order so we'll be passing several values from the blind side. So just order Andy and Total and someone model binding will do is best to find all values and create for us the target object. So, in this case, model by animals search the incoming values for the properties it needs to create the order. Instance

Demo: Using Model Binding
[Autogenerated] let us head back to the demo and see how model binding is doing a great shop in relieving us from having to search manually. For all the submitted data in the full military, currently, half it's possible to click on the complete order button. And what will happen is that we'll go back to this check out method that is simply going to return the view. It's impossible at this point to get out the data that was being sent by the form because if you remember, Harry created a form it is going to post to the checkout action. However, this action method is going to be called also for the Ghent. So what we need to do is create a new action method that is going to be called when the phone is posting back. In other words, when we are doing a post do this controller, the only is controller. I'm now going to create another I actual result and the name will again be check out. But this one will now, except on order. I need to indicate a spin it, Cory, and we see that this check out that that needs to be called when an http post is being done so and and interviewed here, aged proposed so that has been in the corps can distinguish between get requests and the post aggressive generated by our full and the second jacket method has an order, and that order is going to be created by model. But what is going to happen is the following. Our form is bound to in order, and we have used tag helpers that 0.2 properties on the border type to remodel binding. This order is very to be created and passed to our agency. Proposed for Ryan off the Tech. Admit it. So before this Methodist called on order is already created and he's been. Of course, that's only going to create an instance off the order type, but it's also going to try to match all the properties it can find in the submitted data. In our case, those are two form fields in the checkout method. We are going to work with the repository, too. Safe the data to the database. I'm going to work with a shopping cart and see if there are any shopping cart items in there. If there are none, well, Then I'm going to do the model state at an error saying that we need to place items in the shopping cart before we can actually base in order. I'm going to do that by calling all model state the hand model and her method that make the Motor State invented. Next time go to check. The model state is offended Property, the East fan and property is going to check the state off the order model. Instance, even the model binding went correctly. Even out of words. If there were no validation, Evers and the multi state is going to be valid. In that case, we go to the order repositories created a new order. We plead a shopping cart and then we redirect users to an action check out complete note that we don't have that one just yet. If, however, something went wrong, then we sent a view back passing in the original order. In that case, exponent Court, NBC is going to recreate the screen at all the fields are going to contain the data that was entered again by the user has to need to add my checkered complete action in here. I'm going to interview back. For now, it's a bit of a shortcut past a checkout complete message. Thanks for your order. You'll soon endure endless spies and a return of you. Let me quickly create the corresponding view. I'm going to create a checkout, complete you and in their will simply show the checkout complete message and has put a breakpoint in the order controller to take a look at st off the order Instance. And it's not run the application again to recreate an order. I've been feeling all the data here now, under data here, taken complete order and see that all the day that's not being captured by model bindings of mortal binding has really looked at old incoming data. All the posted data and recreated the order for me has not continue placing the order. And then we go, The order has been placed. The only problem now is that it is still possible to enter invalidate. Let's go back to the slides and see how we can fix that.

Adding Validation
[Autogenerated] If all that in his shoppers would always be entering the correct data in a Web form, the world would be a better place. However, I strongly believe that that won't be happening any time soon. So we should be validating the data coming back from the client we'll need of a form validation off the model where we are making sure that data that's being sent is actually what the model is expecting. And if that is not the case, well, then we need to provide meaningful our messages. Take a look at the following flow here began having the ad action accepting an order. However, this time the user has supplied for the total value the stream had the world. I know it's not normal that the user can enter the total off the order, but it's not really the issue here. We are receiving invalid data for the total property. A speeder netcord, NBC's model binding engine, can perform a check to see if the values provided by the model binding meet the requirements off the model object. We can do this using an explicit call in the action method to moral state is valid, a mole estate is a side product off model, binding, really. And it will contain data about how the model binding actually went. The model state is valid. Property will return. True if the model object has no validation ever and of course, falls even home for the nation airs. Only when the model is valid will re in this case be saving the order to the database and then we will redirect the user. In this case, we redirect the user to the checkout complete page. If, however, the most state is funded, property returns falls. In this case, we are returning to the same view. It is gay. Something is wrong with the validation, as are the default view is returned to the user and music and try fixing the heiress. Moral validation can be done on the entire model. Instance in one girl using the model state of his family's property is well, basically returned. True, if the model is vanity and false, if not, we also have on the motor State get validation State mattered which accept a single property. This way we can probe a property to see if it's valid. Finally, we also have the ad model era meant it. If we are performing any manual validation rules, we can also manually add model Harris Ray needed. This matter can be used for this by default. The validation that model banning is doing out of the box is pretty basic typically will want to add more validation rules to our domain classes. For this, we can use Method eight in the form off attributes we can add on the properties of our model classes. These attributes are lambs To specify a validation rules directly on the model properties cried. A few of validation attributes are built into a SP genetic or NBC, including regular expressions required Ansel. It's also possible to get custom attributes and apply these on the properties. We won't be doing that in this course. He's an over here off the most important validation attributes that are built into a spin and core NBC and indeed requires a tribute will raise an error if the value isn't provided so every requiring the format. For example, email is required well at this attributes on the email property. The string length attributes allows us to specify a minimum and also a maximum amount of characters which is allowed for the value. If you want to make sure that the length of a field provided isn't longer and what today, the basic in store, we can use this one. The range attributes. I'm used to make sure that a nomadic value is within a range to the regular expression attributes. We can specify well Rex, which will need to be matched by the value off the property If there is no Mitch and there will be raised the data type attributes well, that's not really going to do any validation, but it will be used by some browses to form its input fields differently, such as for phone email or your ____ entry. Hearing the snippet, you can see that I'm using the required and string length attributes for the first name. Property on the required attribute is being used, and no value is provided When model banning is taking place. The validation will simply fail similarly, and we use the string length attribute and user has entered a value. It has a greater length off characters and what was specified validation will also fail. We've now seen that using these attributes, we can effectively specify customer ever messages. Now these ever messages blows The built in error messages can be displayed in a validation summary. His foundation summary is again attack Albert. In this case, the class that sits behind the tank help it, which is called the Validation Separate tag helper will search for the A s b validation summary attributes on a diff. Any errors that have been found when model binding has taken place will be shown in the validation summary. You can see the SP validation similar attribute blazed on a diff as value as specified all in this case which will quite logically display all from the nation caress that have occurred within the four.

Demo: Adding Validation to the Form
[Autogenerated] in the last them off this module will ants validation on the domain model, and then we'll update the form to include the validation summary so that all errors are shown inside that diff. We're going to use the built in attributes to validate the order. So I'm going to replace the order clause by another snippet that contains validation attributes. Take a look at the updated version off the order clause. For example, it's not with the first name. I've had a tree. Attari. It's the 1st 1 required. Basically, as a man buys will make sure that when users submit the form, this value is filled in. If not an error message resented, your first name will be shown. It also has a display attributes that's not really offended Ation at a good It's a rounder used to display in the label. The correct value in this case first, and a space that name another validation and image is a string length attribute, saying to the user Well, the value cannot contain more than 50 characters. We've created the same attributes for quite a few of these fields down here at the bottom. You can also see that I've used the regular expression attributes on the email property. Half added a regular expression quiet, long once he can see that will ensure that the entered value is a valid email address. If not an error message. The email address is not entered in the correct form. It will be shown, and these attributes will automatically be enforced. But we also need to give the user, of course feedback if he or she and this incorrect data, let's go back to the form on the form. We have two options. We can use a validation summary validation summaries enabled by using the SB validation summary Attack Helper determinations summary will automatically listen for all the validation cars coming from the form and displayed. So, if any validation Harris happened for the first name, the last name that email, that's how long they will be shown in defended ation summary. I can also, on a per field basis, show the a message. We can do that, for example, for this last name by using another stack up. It's called SP Validation four and set that also do last name. If now validation on the last name fails, this span will also show the error message. I'm going to quickly do that for all the order fields as well. Good for the other fields. It's from a similar half of the dish. For the first name, I just I want Anderson do it. And so that does not run the application and see the result off validation. Being a blind, I've created a small order again in an hour, click redound Entering any data on complete order You see the validation taking in. You see here at the top the validation summary, which basically is like a filter for all the validation error is coming from the floor and then we have the individual validation errors shown inside of dispense Notice also that by using the display attributes on the properties on the order clause, we now see last name first name headers. Line one. It's one in nicely formatted. Next

Summary
[Autogenerated] the order functionality is now included in the site. It's not possible to add items to the basket and then placed the order using the form that we have just created in this module. Again, we've been relying heavily on tank helpers to create a form and its fields. And again the HTML that we have created was very clean. Thanks, Dude. Attack house. We have an ID. The validation to reduce off attributes that we have directly added on the model classes. In the next and final model of discourse, we are going to introduce authentication and authorization so that only locked in users can place an order.

Adding Login Capabilities to the Site
Module Introduction
[Autogenerated] it had to happen. This is the lost model that will be spending together for now. But, hey, let's make the best of it, Charlie. Welcome to this model off building weapon like Asians with a speed in its core every C three In this model, you'll be looking at how we can secure the application. More specifically will be taking a look at how we can make sure that not just anyone can place an order, but only locked in user can do. So Let's take a look at the agenda for this model. We'll start the module by exploring the A beyond that will work with for security, which is the spirited core identity. A p I. I give you the needed information to get started with these a PR next, as we've done before. Once we have understood defending mental Sze will add support for authentication to the side, and then we'll make sure that has mentioned only logged in users can place an order and that we will do using authorization

Exploring ASP.NET Core Identity
[Autogenerated] so at this cake of the last model of this course by taking a look at ESPN eight core identity. So what exactly is a spirit core identity, then? While the S P Net core identity framework is basically a membership system has baked into guess Peter Net court using Espen and Identity, we will be able to authenticate and authorize users. Authentication has to do with knowing who is trying to look into the site. Authorization will that I was to manage which permissions of certain user has to access a certain resource so jacking if the user can see, for example, a certain page. Furthermore, it can allow us to manage rolls claims and other more advanced options related to identity management in our ace be Manticore applications. To do this, it can even work with external providers such as Google or Facebook. However, we won't be discussing the letter in discourse. Take a look at my ___ peanut core enterprise course, which goes further into this. Here we will limit ourselves to adding the ability to look into the site tremendous. The authentication and authorization information, a spin it identity can work with Seiko Server out of the box, and that's also what we will be doing in this course now, since ESPN at Court DuPont one. The way that we can work with a spin it identity has changed. It's been at court DuPont. One brought with it support for scaffolding the views, which is what we will be doing in this mortal. This approach will make it very straightforward for us. A developer to include well constructed identity into your applications in the upcoming demo will see what it takes the ads aboard for a spin it identity in our application. The first thing that will do is making sure that our Abdi Bey context now will inherit from the identity D B context. Then, as we've seen quite a few times already, we need to make some configuration changes in a replication, so we'll need to make some changes in the startup class again. I'll show you which changes in the upcoming ______. Apart from the basic configuration, toe add support has been an identity also allows us to further constrained things like the registration for the site even, for example, want to force uses to use a strong password which we should by the way we can configure identity so that it doesn't allow simple passwords. We can also use options to configure HOWTHE security cookies should behave, such as the expiration time. Every can configure user options, such as the fact that the email used upon registration should be unique. Finally, a set will use in this module the scaffolding support, which was added in gay Spin it court 2.1 to give us as developers hook into the registration and Logan process, and we see that in the demo as well. Here's an example off that configuration code. I was just talking about allowing us to configure how identity behaves in the car that you see here, which goes into started call. Of course, we are using identity options to configure that the user password in this case requires a digit. The length should be eight characters at least, and it should also be a non Alphen American character. I'm also requiring that the user who is registering on the side should do so using a unique email address upon registration. So I we try from toe to register this user. A spin it identity will perform. All these foundation checks and registration can only succeed if these conditions are met

Demo: Preparing the Site for ASP.NET Core Identity
[Autogenerated] or aunt. Let us not return to the demo application as mentioned. Will first need to perform some work to actually add support for AIDS. Bennett Identity to the side. And that's exactly what we'll be doing in this first timer. I'm going to prepare the application now toe work with a spin it court identity. The first thing I'm going to do is bringing in the correct packages. This is needed started with a spinning core trip on hope in Espen in court 2.1 That is not necessary. We're going to add new packages and going to brass for tunic and packages the Microsoft A spinning core identity built entity framework core package. Bring that one in first. A second thing. We also need to bring in a spin its core identity. You I. That's the package that will contain razor pages used for scaffolding, as we'll see soon. Next, I'm going to upgrade my coat a little bit. I'm going to go back to my Abdi Bey context, and instead of having this one inherit from deep in context, I'm going to let it inherit from identity debate context in Identity User, I need to bring in the correct using statement for this to work and another wonderful identity user, the Identity Devi context is the base class for the entity. Favorite core context to use with identity Identity User is a building claws that can be used to represent a user in identity. If you look at its definition, well, see that it comes with grandson properties already typical for capturing user information such as the user name, the email, the phone number and, ofcourse, not a real password, but a password hash. It's possible to inherit from this base identity user cause and capture extra properties. Because I've changed. My Abdi Bey context do now inherit from identity debate context. I need to do another migration. Why? Because I'll end the debate context will already contain a lot of extra functionality to manage tables related to identity. That's great. Another migration. I'm gonna go to my packet manager console and at another migration. I'm gonna call it identity at it off course doing of the database. If you look at the migration, well, see, that's quite a few. Davis are being generated a spin its users a supernatural claims his bath user claims answer one. If we take a look at the actual database we seemed, eat that quite a few tables have been added, all related to a spin it user and roll information. It is a place where nearly finished. I need to go to the start up. I let a spinning core use authentication. I'm going to over here behind the use rounding and the user authentication Miller. This will basically enable us to authenticate using a genetic or identity. It is in place. The implication is ready to start using identity that's not see how we can use it.

Adding Authentication
[Autogenerated] And now that the site is configured with a S P net identity, it's time to start using it. Just are figuring won't really do a lot of Americans now, will it? Let's see how we can now add support for authentication in the next part has already mentioned since he's been in court 2.1. A new way of working with a spin it identity was introduced based on scaffolding. This approach is identical for a spin in court tree pronto NBC, and so that's the one that will be using here prior to a spin it Court 2.1. We basically had to follow a manual approach. This included creating a controller the beginning the can't control right away and creating all the views we meet manually. So see, it takes the mouthy ______ created for Logan and Register. Answer. While this old approach still works and nothing is going to stop you from using it, the new approach based on scaffolding is what we are going to use here for our a spin it 3.0, NBC Application Scaffolding is actually based on something that we haven't looked at, which is called razor Class. libraries. Now, before we gonna show you how things work, I owe you an explanation on this razor class life, everything. A new concept also introduced, by the way, in a spinning core 2.1 razor close lampreys all libraries so projects, and we can use them to put items in there that you would typically place in the Aspen and core application itself. This includes views, pages, controller, steel components. And so, basically all has been, of course, Pacific functionality that would normally directly embedded in the ice Planet. Core embassy itself, by placing these items in a library return, Of course, package and reused is across multiple applications, just like with a regular class library. One very specific thing is that we can override items in these libraries. Imagine that you have included a view gold home in the razor claws library. If you're a bad court up that the references. The library also has a viewer named home in the same part. The one in the ice beneath court up itself will override the one in the library. This allows you do selectively include items from the library in your application. Raise across libraries can be added to any and spin it court application by following the same part as we do for regular eighth minute score Web applications in the temple, it's election by a log. You'll see the razor cost like every type, as have highlighted here. Now, why did I bother to explain all of a sudden about his razor class? Slam pays why we were talking about A S peanut identity. You may be wondering, Well, let me explain. Microsoft has included identity in a razor glass library, including all the views that it will typically need to create support for an entity in an application. All views and functionality has does been wrapped in a razor class library that comes with a spin it core automatic. We can then use scaffolding to generate source code in our application. So basically what will happen is that a copy of the code included in the default Razor class library will be added to our project. These files will have the same name and just override the defaults. We can modify these in our application full control over the locum process, the registration view Answer. I'll show you how this works into them. Finally We'll also need to do some changes to our layout. So our template off the page so that is looking capabilities will become visible in the code that will get generated by the scaffold will see some important classes that a spin it identity is based upon the user manager. Klaus is used to manage all in direction with use of objects in the data store. Basically, think off this close as your way to create users, delete users and, in general, do all in directions regarding user objects. It will also take care off all relevant changes in the data stores or in the sequel server database. Next, the signing manage of class will be used for user authentication and related actions. It defines methods such as passwords signing a zinc which accepts a user name and password. I'd be triggered. His method will try open to getting the user. It will return a sign, in result with the succeeded property indicating whether or not authentication attempt was successful. Many, many other methods are available on this close, So chest sign out chasing change password. Hey, saying confirm email is sink and many, many more what you need to remember is that these two important classes off the identity a p I offering us an abstraction over the details off, working with authentication and using management. The identity A. B I makes this difficult task a lot easier, and since underneath it's built on top of membership, you can rest short that the implementation off your security related features is done in the right way. When you use the Aspen it identity a P I.

Demo: Adding Login and Registration Functionality
[Autogenerated] in the next demo, we're going to allow users to register and lock in. We're going to use the scaffolding options that we have in a spin at court to generate the views. And we also need to perform some changes to our land. Let's take a look. I'm now going to show you the magic off scaffolding. We're going to have a lot of the eighth minute core identity functionality generated already for us. So go to the project and brightly gonna project file and then say at news, Careful that item. The dialogue that appears, make sure that you select identity. Thank you. Go on. That in a diamond, it appears now we cannot indicate which file we want to over it. Overrunning means that a copy off that file will be copied or generated in our application, and we can then change it. I'm going to do that with the Logan and the log out and the register screens. I need to point my identity to my empty be context. And at this point, the two ing will have searched your application for all context classes that inherit from identity. __ context. If you don't have one you can create one yourself, but we already have one for Let's use that marriages did. You will give you some information on the next steps you still need to do. I'm going to take it through all the steps you still need to perform. You should know it is at this point that an area's folder has been created in your application. Indeed, all the identity files will be under the identity area. Expand on that. We'll never see, not views but pages this careful that finals will be generated using the A spinnin core razor pages framework. That is something that it uses our default for this. However, you shouldn't worry about it because you can still integrate it with a spoon at court. Every sea bass over here you can see under account, you're overwritten fast. For example, we have to look in file, which is bound to the Logan model, which is a type that this generate also in your application. When you added the identity through scaffolding, there's a form, then hs validation. It's a very similar form to what we created in the previous module and then accepts email and password, and I remember me option. I just It's great. It's very similar but is bound to the register model. I guess that you can change the screens. They are your coat at this point, so anything that you do well apply directly in your application. If you are happy with the default implementation, you don't even need to bring them into your application. That is, you don't need to configure a few more things. Go back to the start of cause and IndyCar Figure Service is I know I need to use at default identity passing ended identity user bringing using statement First I've used here Sarah settled at devote identity that real bringing that basic functionality for working with identity in your application negative also used the at Entity Framework Store that indicates that identity needs to use entity framework to store its data and is going to use your MDB context, which inherits from identity debate context to do so. I remember that I said that the schedule that identity uses razor pages Well, because of that, we actually to bring in support for razor pages as well, although you don't need it for anything else. In your implication, it is required because of the scaffold it fast. And what a very same reason we also in nickel figure method needs to at an end point four razor pages as well. Now, how are we going to actually looking and register? Well, I'm gonna find that was registered is under your shared folder, and it is the Logan partial file. It's a partial that you got for free note at the time of the creation of the school's scaffolding, makes an ever here and forgets to aunt inject. Here. The ad inject is dependency injection, but then, in the view, it is going to use the Sanan manager and the user manager inside of your view, and those are available to dependency injection. By the time you see this course, this burg may already be in soft. Anyway, the log impartial is really what it is saying. It's a part of you that allows us to check if the user is already signed in using is siding. We're going to show a link with the user name and the lookout option. If, however, use is not signed in, we're going to show to Ling's to register or logging all of that is managed by the sign and manager but is sent in method. That, except the current user as its data. Now, of course, this look impartial needs to be used from somewhere, and a good place for that would be only out. Let's go to only at and in here Have now, added the partial tag helper, and I'm pointing to the log impartial that was added automatically by a spin ___________ identity. Now, if you run the application at this board, you will get an exception. The reason is that we need another section here called the Script section, and we set that to default False. If you don't have this, you will actually see an exception that says you also need this section scripts the generated fast need this section. If all of this is in place, we should not be able to look into our application. Let's try it. That's dope. You now see the ability Do Register and Logan haven't registered yet, so let's do that. First, I'm going to create a new account. Make sure that the greatest strong password, because by default eight minute identity is configured to require at least eight characters. Capital a number and a few other things Pickle register, and I see that we've effectively locked into the application. He chose my user name and the ability to look out again. That is the log impartial that you saw.

Enabling Authorization
[Autogenerated] now users are able to register, and also signing in. Most cases will use this functionality to allow or deny access to a certain resource to our users. For that, we need to add support for authorization in the application. In the last part of this model will do exactly that. Although we have now allowed a youth to register in the application, we're not really using this information that we now have just yet. We've basically used authentication. We should probably also used the authorization part will want to allow only looked in users to access a certain resource. We can restrict access to a controller and all its actions by using the all tries a tribute on the controller or on the actions themselves. As you can see here, when the request is now received for an action method off this controller a spin its core will first check if the user making the request is already locked in. And if that is not a case, the request is not allowed. The user has to look in first as mentioned, We can also have more fine grained control over what the user can do. Using the altar has a tribute. We can also blaze it on the level of an action method, effectively requiring the used to be looked in to access. Just this action matter now, just using the authorized A tribute in its most basic form allows us to require that the user is logged in to perform a certain action. Many more options are available, so we can, for example, also use the authoress attributes and passed in a role which is the land. And then he's been a core. Will check if the user is part of the given role. If you're interested in knowing more amount is again, please check. My enterprise has been a core every seekers Europe Louis at, which will dive deep into this topic.

Demo: Authorizing Users to Place an Order
[Autogenerated] in the final demo of discourse. We are going to use altering ization in the form of the Altera's contribute to ensure that only locked in users can place an order. Although if added authentication, we're not really doing anything with it because users can still place orders read out looking, and that's not really useful. So what I'm going to do is I'm going to go to my order controller, and I'm going to require that users have to be authorized before they can actually interact with actions of this controller. I can do that by adding the authoress. Contribute on Inter. Bring in ESPN into court authorization. If you now try to browse to any of the actions of this controller, I will be redirected so that I need to look in first for authorization to work. You can need to go to the start up on more time and in there when he took plugin authorization middleware. That's try running application again and trying placing an order retirement, looking in its place, an order like we've done before and as you see and I want to go to the tech connection on the order controller. But I'm not allowed to. I actually need to log in first. Let's try that. Take a look in and then we can please the order as before. But we need to be loved in in order to access the actions on the order controller.

Summary and Course Closing
[Autogenerated] we've reached the end of the last marshal of discourse. Let us recap what we have seen in this module. We have covered the A's Benet identity. A B I. I have seen that with this rain work, we can tend to get users in our sight. We can doesn't know who is trying to access the application. Next. You also used a spinach identity toe. All tries users. This means that we can check if the user has access to a certain resource. And this concludes this course. I want to congratulate you for finishing it. I hope you enjoyed watching this course and that you have learned a lot of new things that you can use in your professional career. Thanks for watching and bye for now.

